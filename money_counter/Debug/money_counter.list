
money_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005968  08005968  00006968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e8  080059e8  00007084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059e8  080059e8  000069e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f0  080059f0  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f0  080059f0  000069f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080059f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000084  08005a7c  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08005a7c  000072d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdfe  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002379  00000000  00000000  00013eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00016230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b9  00000000  00000000  00016d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c24  00000000  00000000  00017649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110e4  00000000  00000000  0002e26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008844b  00000000  00000000  0003f351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c779c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003248  00000000  00000000  000c77e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000caa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005950 	.word	0x08005950

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08005950 	.word	0x08005950

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b4b      	ldr	r3, [pc, #300]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a4a      	ldr	r2, [pc, #296]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b48      	ldr	r3, [pc, #288]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b44      	ldr	r3, [pc, #272]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a43      	ldr	r2, [pc, #268]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b41      	ldr	r3, [pc, #260]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b3d      	ldr	r3, [pc, #244]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a3c      	ldr	r2, [pc, #240]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b3a      	ldr	r3, [pc, #232]	@ (80006f4 <MX_GPIO_Init+0x148>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, en_Pin|es_Pin|lcd_0_Pin|lcd_1_Pin
 8000616:	2200      	movs	r2, #0
 8000618:	21f3      	movs	r1, #243	@ 0xf3
 800061a:	4837      	ldr	r0, [pc, #220]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 800061c:	f001 f9d6 	bl	80019cc <HAL_GPIO_WritePin>
                          |lcd_2_Pin|lcd_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : en_Pin es_Pin lcd_0_Pin lcd_1_Pin
                           lcd_2_Pin lcd_3_Pin */
  GPIO_InitStruct.Pin = en_Pin|es_Pin|lcd_0_Pin|lcd_1_Pin
 8000620:	23f3      	movs	r3, #243	@ 0xf3
 8000622:	60fb      	str	r3, [r7, #12]
                          |lcd_2_Pin|lcd_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4619      	mov	r1, r3
 8000636:	4830      	ldr	r0, [pc, #192]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 8000638:	f001 f82c 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800063c:	23ff      	movs	r3, #255	@ 0xff
 800063e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000640:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000646:	2302      	movs	r3, #2
 8000648:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4619      	mov	r1, r3
 8000650:	482a      	ldr	r0, [pc, #168]	@ (80006fc <MX_GPIO_Init+0x150>)
 8000652:	f001 f81f 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_1_Pin IR_2_Pin */
  GPIO_InitStruct.Pin = IR_1_Pin|IR_2_Pin;
 8000656:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	4824      	ldr	r0, [pc, #144]	@ (80006fc <MX_GPIO_Init+0x150>)
 800066c:	f001 f812 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000670:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000676:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800067c:	2302      	movs	r3, #2
 800067e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4619      	mov	r1, r3
 8000686:	481c      	ldr	r0, [pc, #112]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 8000688:	f001 f804 	bl	8001694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2006      	movs	r0, #6
 8000692:	f000 ff28 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000696:	2006      	movs	r0, #6
 8000698:	f000 ff41 	bl	800151e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2007      	movs	r0, #7
 80006a2:	f000 ff20 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006a6:	2007      	movs	r0, #7
 80006a8:	f000 ff39 	bl	800151e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2008      	movs	r0, #8
 80006b2:	f000 ff18 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006b6:	2008      	movs	r0, #8
 80006b8:	f000 ff31 	bl	800151e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	2009      	movs	r0, #9
 80006c2:	f000 ff10 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006c6:	2009      	movs	r0, #9
 80006c8:	f000 ff29 	bl	800151e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	200a      	movs	r0, #10
 80006d2:	f000 ff08 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 ff21 	bl	800151e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2017      	movs	r0, #23
 80006e2:	f000 ff00 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006e6:	2017      	movs	r0, #23
 80006e8:	f000 ff19 	bl	800151e <HAL_NVIC_EnableIRQ>

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020400 	.word	0x40020400

08000700 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f001 f977 	bl	8001a30 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 fbc6 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000a0 	.word	0x200000a0
 8000754:	40005400 	.word	0x40005400
 8000758:	000186a0 	.word	0x000186a0

0800075c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <HAL_I2C_MspInit+0x94>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d134      	bne.n	80007e8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <HAL_I2C_MspInit+0x98>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a1b      	ldr	r2, [pc, #108]	@ (80007f4 <HAL_I2C_MspInit+0x98>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <HAL_I2C_MspInit+0x98>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800079a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a0:	2312      	movs	r3, #18
 80007a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ac:	2304      	movs	r3, #4
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <HAL_I2C_MspInit+0x9c>)
 80007b8:	f000 ff6c 	bl	8001694 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_I2C_MspInit+0x98>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	4a0b      	ldr	r2, [pc, #44]	@ (80007f4 <HAL_I2C_MspInit+0x98>)
 80007c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_I2C_MspInit+0x98>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	201f      	movs	r0, #31
 80007de:	f000 fe82 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007e2:	201f      	movs	r0, #31
 80007e4:	f000 fe9b 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	@ 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020400 	.word	0x40020400

080007fc <HAL_GPIO_EXTI_Callback>:
void handle_isr8(void);
void handle_isr9(void);



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin){
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800080c:	d074      	beq.n	80008f8 <HAL_GPIO_EXTI_Callback+0xfc>
 800080e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000812:	dc74      	bgt.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
 8000814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000818:	d06b      	beq.n	80008f2 <HAL_GPIO_EXTI_Callback+0xf6>
 800081a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800081e:	dc6e      	bgt.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
 8000820:	2b80      	cmp	r3, #128	@ 0x80
 8000822:	d063      	beq.n	80008ec <HAL_GPIO_EXTI_Callback+0xf0>
 8000824:	2b80      	cmp	r3, #128	@ 0x80
 8000826:	dc6a      	bgt.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
 8000828:	2b20      	cmp	r3, #32
 800082a:	dc47      	bgt.n	80008bc <HAL_GPIO_EXTI_Callback+0xc0>
 800082c:	2b00      	cmp	r3, #0
 800082e:	dd66      	ble.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
 8000830:	3b01      	subs	r3, #1
 8000832:	2b1f      	cmp	r3, #31
 8000834:	d863      	bhi.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
 8000836:	a201      	add	r2, pc, #4	@ (adr r2, 800083c <HAL_GPIO_EXTI_Callback+0x40>)
 8000838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083c:	080008c3 	.word	0x080008c3
 8000840:	080008c9 	.word	0x080008c9
 8000844:	080008ff 	.word	0x080008ff
 8000848:	080008cf 	.word	0x080008cf
 800084c:	080008ff 	.word	0x080008ff
 8000850:	080008ff 	.word	0x080008ff
 8000854:	080008ff 	.word	0x080008ff
 8000858:	080008d5 	.word	0x080008d5
 800085c:	080008ff 	.word	0x080008ff
 8000860:	080008ff 	.word	0x080008ff
 8000864:	080008ff 	.word	0x080008ff
 8000868:	080008ff 	.word	0x080008ff
 800086c:	080008ff 	.word	0x080008ff
 8000870:	080008ff 	.word	0x080008ff
 8000874:	080008ff 	.word	0x080008ff
 8000878:	080008db 	.word	0x080008db
 800087c:	080008ff 	.word	0x080008ff
 8000880:	080008ff 	.word	0x080008ff
 8000884:	080008ff 	.word	0x080008ff
 8000888:	080008ff 	.word	0x080008ff
 800088c:	080008ff 	.word	0x080008ff
 8000890:	080008ff 	.word	0x080008ff
 8000894:	080008ff 	.word	0x080008ff
 8000898:	080008ff 	.word	0x080008ff
 800089c:	080008ff 	.word	0x080008ff
 80008a0:	080008ff 	.word	0x080008ff
 80008a4:	080008ff 	.word	0x080008ff
 80008a8:	080008ff 	.word	0x080008ff
 80008ac:	080008ff 	.word	0x080008ff
 80008b0:	080008ff 	.word	0x080008ff
 80008b4:	080008ff 	.word	0x080008ff
 80008b8:	080008e1 	.word	0x080008e1
 80008bc:	2b40      	cmp	r3, #64	@ 0x40
 80008be:	d012      	beq.n	80008e6 <HAL_GPIO_EXTI_Callback+0xea>
	case GPIO_PIN_9 :
		handle_isr9();
		break;
	}

}
 80008c0:	e01d      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr0();
 80008c2:	f000 f821 	bl	8000908 <handle_isr0>
		break;
 80008c6:	e01a      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr1();
 80008c8:	f000 f82e 	bl	8000928 <handle_isr1>
		break;
 80008cc:	e017      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr2();
 80008ce:	f000 f83b 	bl	8000948 <handle_isr2>
		break;
 80008d2:	e014      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr3();
 80008d4:	f000 f83f 	bl	8000956 <handle_isr3>
		break;
 80008d8:	e011      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr4();
 80008da:	f000 f843 	bl	8000964 <handle_isr4>
		break;
 80008de:	e00e      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr5();
 80008e0:	f000 f852 	bl	8000988 <handle_isr5>
		break;
 80008e4:	e00b      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr6();
 80008e6:	f000 f861 	bl	80009ac <handle_isr6>
		break;
 80008ea:	e008      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr7();
 80008ec:	f000 f870 	bl	80009d0 <handle_isr7>
		break;
 80008f0:	e005      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr8();
 80008f2:	f000 f87f 	bl	80009f4 <handle_isr8>
		break;
 80008f6:	e002      	b.n	80008fe <HAL_GPIO_EXTI_Callback+0x102>
		handle_isr9();
 80008f8:	f000 f88e 	bl	8000a18 <handle_isr9>
		break;
 80008fc:	bf00      	nop
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop

08000908 <handle_isr0>:


void handle_isr0(void){
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	flag++;
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <handle_isr0+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <handle_isr0+0x1c>)
 8000916:	701a      	strb	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000011e 	.word	0x2000011e

08000928 <handle_isr1>:

void handle_isr1(void){
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	flag2++;
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <handle_isr1+0x1c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <handle_isr1+0x1c>)
 8000936:	701a      	strb	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000134 	.word	0x20000134

08000948 <handle_isr2>:

void handle_isr2(void){
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <handle_isr3>:


void handle_isr3(void){
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <handle_isr4>:


void handle_isr4(void){
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	money_category = 5;
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <handle_isr4+0x1c>)
 800096a:	2205      	movs	r2, #5
 800096c:	701a      	strb	r2, [r3, #0]
	counter = 0;
 800096e:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <handle_isr4+0x20>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]

}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	200000f5 	.word	0x200000f5
 8000984:	200000f6 	.word	0x200000f6

08000988 <handle_isr5>:


void handle_isr5(void){
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	money_category = 10;
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <handle_isr5+0x1c>)
 800098e:	220a      	movs	r2, #10
 8000990:	701a      	strb	r2, [r3, #0]
	counter = 0;
 8000992:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <handle_isr5+0x20>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]

}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200000f5 	.word	0x200000f5
 80009a8:	200000f6 	.word	0x200000f6

080009ac <handle_isr6>:


void handle_isr6(void){
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	money_category = 20;
 80009b0:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <handle_isr6+0x1c>)
 80009b2:	2214      	movs	r2, #20
 80009b4:	701a      	strb	r2, [r3, #0]
	counter = 0;
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <handle_isr6+0x20>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]

}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200000f5 	.word	0x200000f5
 80009cc:	200000f6 	.word	0x200000f6

080009d0 <handle_isr7>:


void handle_isr7(void){
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	money_category = 50;
 80009d4:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <handle_isr7+0x1c>)
 80009d6:	2232      	movs	r2, #50	@ 0x32
 80009d8:	701a      	strb	r2, [r3, #0]
	counter = 0;
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <handle_isr7+0x20>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]

}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200000f5 	.word	0x200000f5
 80009f0:	200000f6 	.word	0x200000f6

080009f4 <handle_isr8>:


void handle_isr8(void){
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	money_category = 100;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <handle_isr8+0x1c>)
 80009fa:	2264      	movs	r2, #100	@ 0x64
 80009fc:	701a      	strb	r2, [r3, #0]
	counter = 0;
 80009fe:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <handle_isr8+0x20>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]

}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200000f5 	.word	0x200000f5
 8000a14:	200000f6 	.word	0x200000f6

08000a18 <handle_isr9>:


void handle_isr9(void){
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	money_category = 200;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <handle_isr9+0x1c>)
 8000a1e:	22c8      	movs	r2, #200	@ 0xc8
 8000a20:	701a      	strb	r2, [r3, #0]
	counter = 0;
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <handle_isr9+0x20>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]

}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	200000f5 	.word	0x200000f5
 8000a38:	200000f6 	.word	0x200000f6

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a40:	f000 fbe0 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a44:	f000 f98a 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a48:	f7ff fdb0 	bl	80005ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a4c:	f7ff fe58 	bl	8000700 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000a50:	f000 fb34 	bl	80010bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_4bit_intialize(&lcd_1);
 8000a54:	48a9      	ldr	r0, [pc, #676]	@ (8000cfc <main+0x2c0>)
 8000a56:	f004 f901 	bl	8004c5c <lcd_4bit_intialize>
  //TCS34725_Init(&hi2c1);
  HAL_UART_Receive_IT(&huart2, &BL_data, 1);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	49a8      	ldr	r1, [pc, #672]	@ (8000d00 <main+0x2c4>)
 8000a5e:	48a9      	ldr	r0, [pc, #676]	@ (8000d04 <main+0x2c8>)
 8000a60:	f003 f9c4 	bl	8003dec <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_4bit_send_command(&lcd_1, _LCD_CLEAR);
 8000a64:	2101      	movs	r1, #1
 8000a66:	48a5      	ldr	r0, [pc, #660]	@ (8000cfc <main+0x2c0>)
 8000a68:	f004 f948 	bl	8004cfc <lcd_4bit_send_command>
  lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Count :");
 8000a6c:	4ba6      	ldr	r3, [pc, #664]	@ (8000d08 <main+0x2cc>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2101      	movs	r1, #1
 8000a72:	48a2      	ldr	r0, [pc, #648]	@ (8000cfc <main+0x2c0>)
 8000a74:	f004 f9ac 	bl	8004dd0 <lcd_4bit_send_string_pos>
  lcd_4bit_send_string_pos(&lcd_1, 2, 1, "Total :");
 8000a78:	4ba4      	ldr	r3, [pc, #656]	@ (8000d0c <main+0x2d0>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	489f      	ldr	r0, [pc, #636]	@ (8000cfc <main+0x2c0>)
 8000a80:	f004 f9a6 	bl	8004dd0 <lcd_4bit_send_string_pos>
  lcd_4bit_send_string_pos(&lcd_1, 1, 11, "CA:");
 8000a84:	4ba2      	ldr	r3, [pc, #648]	@ (8000d10 <main+0x2d4>)
 8000a86:	220b      	movs	r2, #11
 8000a88:	2101      	movs	r1, #1
 8000a8a:	489c      	ldr	r0, [pc, #624]	@ (8000cfc <main+0x2c0>)
 8000a8c:	f004 f9a0 	bl	8004dd0 <lcd_4bit_send_string_pos>

  while (1)
  {

	  if(!(HAL_GPIO_ReadPin(IR_1_GPIO_Port, IR_1_Pin))){
 8000a90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a94:	489f      	ldr	r0, [pc, #636]	@ (8000d14 <main+0x2d8>)
 8000a96:	f000 ff81 	bl	800199c <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f040 8096 	bne.w	8000bce <main+0x192>
		  lcd_4bit_send_command(&lcd_1, _LCD_CLEAR);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4895      	ldr	r0, [pc, #596]	@ (8000cfc <main+0x2c0>)
 8000aa6:	f004 f929 	bl	8004cfc <lcd_4bit_send_command>
		  lcd_4bit_send_string_pos(&lcd_1, 1, 1, "count:");
 8000aaa:	4b9b      	ldr	r3, [pc, #620]	@ (8000d18 <main+0x2dc>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4892      	ldr	r0, [pc, #584]	@ (8000cfc <main+0x2c0>)
 8000ab2:	f004 f98d 	bl	8004dd0 <lcd_4bit_send_string_pos>
		  lcd_4bit_send_string_pos(&lcd_1, 2, 1, "Total :");
 8000ab6:	4b95      	ldr	r3, [pc, #596]	@ (8000d0c <main+0x2d0>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2102      	movs	r1, #2
 8000abc:	488f      	ldr	r0, [pc, #572]	@ (8000cfc <main+0x2c0>)
 8000abe:	f004 f987 	bl	8004dd0 <lcd_4bit_send_string_pos>
		  lcd_4bit_send_string_pos(&lcd_1, 1, 11, "CA:");
 8000ac2:	4b93      	ldr	r3, [pc, #588]	@ (8000d10 <main+0x2d4>)
 8000ac4:	220b      	movs	r2, #11
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	488c      	ldr	r0, [pc, #560]	@ (8000cfc <main+0x2c0>)
 8000aca:	f004 f981 	bl	8004dd0 <lcd_4bit_send_string_pos>
		  counter++;
 8000ace:	4b93      	ldr	r3, [pc, #588]	@ (8000d1c <main+0x2e0>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b91      	ldr	r3, [pc, #580]	@ (8000d1c <main+0x2e0>)
 8000ad8:	701a      	strb	r2, [r3, #0]
		  switch(money_category){
 8000ada:	4b91      	ldr	r3, [pc, #580]	@ (8000d20 <main+0x2e4>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ae0:	d012      	beq.n	8000b08 <main+0xcc>
 8000ae2:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ae4:	dc3a      	bgt.n	8000b5c <main+0x120>
 8000ae6:	2b64      	cmp	r3, #100	@ 0x64
 8000ae8:	d015      	beq.n	8000b16 <main+0xda>
 8000aea:	2b64      	cmp	r3, #100	@ 0x64
 8000aec:	dc36      	bgt.n	8000b5c <main+0x120>
 8000aee:	2b32      	cmp	r3, #50	@ 0x32
 8000af0:	d018      	beq.n	8000b24 <main+0xe8>
 8000af2:	2b32      	cmp	r3, #50	@ 0x32
 8000af4:	dc32      	bgt.n	8000b5c <main+0x120>
 8000af6:	2b14      	cmp	r3, #20
 8000af8:	d01b      	beq.n	8000b32 <main+0xf6>
 8000afa:	2b14      	cmp	r3, #20
 8000afc:	dc2e      	bgt.n	8000b5c <main+0x120>
 8000afe:	2b05      	cmp	r3, #5
 8000b00:	d025      	beq.n	8000b4e <main+0x112>
 8000b02:	2b0a      	cmp	r3, #10
 8000b04:	d01c      	beq.n	8000b40 <main+0x104>
 8000b06:	e029      	b.n	8000b5c <main+0x120>
		  case 200:
			  ca200_counter++;
 8000b08:	4b86      	ldr	r3, [pc, #536]	@ (8000d24 <main+0x2e8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b84      	ldr	r3, [pc, #528]	@ (8000d24 <main+0x2e8>)
 8000b12:	701a      	strb	r2, [r3, #0]
			  break;
 8000b14:	e022      	b.n	8000b5c <main+0x120>
		  case 100:
			  ca100_counter++;
 8000b16:	4b84      	ldr	r3, [pc, #528]	@ (8000d28 <main+0x2ec>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b82      	ldr	r3, [pc, #520]	@ (8000d28 <main+0x2ec>)
 8000b20:	701a      	strb	r2, [r3, #0]
			  break;
 8000b22:	e01b      	b.n	8000b5c <main+0x120>
		  case 50:
			  ca50_counter++;
 8000b24:	4b81      	ldr	r3, [pc, #516]	@ (8000d2c <main+0x2f0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b7f      	ldr	r3, [pc, #508]	@ (8000d2c <main+0x2f0>)
 8000b2e:	701a      	strb	r2, [r3, #0]
			  break;
 8000b30:	e014      	b.n	8000b5c <main+0x120>
		  case 20:
			  ca20_counter++;
 8000b32:	4b7f      	ldr	r3, [pc, #508]	@ (8000d30 <main+0x2f4>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8000d30 <main+0x2f4>)
 8000b3c:	701a      	strb	r2, [r3, #0]
			  break;
 8000b3e:	e00d      	b.n	8000b5c <main+0x120>
		  case 10:
			  ca10_counter++;
 8000b40:	4b7c      	ldr	r3, [pc, #496]	@ (8000d34 <main+0x2f8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b7a      	ldr	r3, [pc, #488]	@ (8000d34 <main+0x2f8>)
 8000b4a:	701a      	strb	r2, [r3, #0]
			  break;
 8000b4c:	e006      	b.n	8000b5c <main+0x120>
		  case 5:
			  ca5_counter++;
 8000b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8000d38 <main+0x2fc>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b78      	ldr	r3, [pc, #480]	@ (8000d38 <main+0x2fc>)
 8000b58:	701a      	strb	r2, [r3, #0]
			  break;
 8000b5a:	bf00      	nop
		  }
		  //total += ((counter*money_category) - (money_category * (counter-1)));
		  total += money_category;  // every time
 8000b5c:	4b70      	ldr	r3, [pc, #448]	@ (8000d20 <main+0x2e4>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b76      	ldr	r3, [pc, #472]	@ (8000d3c <main+0x300>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b74      	ldr	r3, [pc, #464]	@ (8000d3c <main+0x300>)
 8000b6c:	801a      	strh	r2, [r3, #0]
		  convert_uint8_to_string(counter,ch_counter);
 8000b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8000d1c <main+0x2e0>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4973      	ldr	r1, [pc, #460]	@ (8000d40 <main+0x304>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 f9ff 	bl	8004f78 <convert_uint8_to_string>
		  convert_uint8_to_string(money_category,ch_ca);
 8000b7a:	4b69      	ldr	r3, [pc, #420]	@ (8000d20 <main+0x2e4>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	4971      	ldr	r1, [pc, #452]	@ (8000d44 <main+0x308>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 f9f9 	bl	8004f78 <convert_uint8_to_string>
		  convert_uint16_to_string(total,ch_total);
 8000b86:	4b6d      	ldr	r3, [pc, #436]	@ (8000d3c <main+0x300>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	496f      	ldr	r1, [pc, #444]	@ (8000d48 <main+0x30c>)
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f004 fa0f 	bl	8004fb0 <convert_uint16_to_string>
		  lcd_4bit_send_string_pos(&lcd_1, 1, 8,ch_counter);
 8000b92:	4b6b      	ldr	r3, [pc, #428]	@ (8000d40 <main+0x304>)
 8000b94:	2208      	movs	r2, #8
 8000b96:	2101      	movs	r1, #1
 8000b98:	4858      	ldr	r0, [pc, #352]	@ (8000cfc <main+0x2c0>)
 8000b9a:	f004 f919 	bl	8004dd0 <lcd_4bit_send_string_pos>
		  lcd_4bit_send_string_pos(&lcd_1, 1, 14,ch_ca);
 8000b9e:	4b69      	ldr	r3, [pc, #420]	@ (8000d44 <main+0x308>)
 8000ba0:	220e      	movs	r2, #14
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4855      	ldr	r0, [pc, #340]	@ (8000cfc <main+0x2c0>)
 8000ba6:	f004 f913 	bl	8004dd0 <lcd_4bit_send_string_pos>
		  lcd_4bit_send_string_pos(&lcd_1, 2, 9,ch_total);
 8000baa:	4b67      	ldr	r3, [pc, #412]	@ (8000d48 <main+0x30c>)
 8000bac:	2209      	movs	r2, #9
 8000bae:	2102      	movs	r1, #2
 8000bb0:	4852      	ldr	r0, [pc, #328]	@ (8000cfc <main+0x2c0>)
 8000bb2:	f004 f90d 	bl	8004dd0 <lcd_4bit_send_string_pos>
		  while(!(HAL_GPIO_ReadPin(IR_1_GPIO_Port, IR_1_Pin)));
 8000bb6:	bf00      	nop
 8000bb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bbc:	4855      	ldr	r0, [pc, #340]	@ (8000d14 <main+0x2d8>)
 8000bbe:	f000 feed 	bl	800199c <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f7      	beq.n	8000bb8 <main+0x17c>
		  HAL_Delay(50);
 8000bc8:	2032      	movs	r0, #50	@ 0x32
 8000bca:	f000 fb8d 	bl	80012e8 <HAL_Delay>
	  }
	  if(flag){
 8000bce:	4b5f      	ldr	r3, [pc, #380]	@ (8000d4c <main+0x310>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d037      	beq.n	8000c46 <main+0x20a>
		 flag = 0;
 8000bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d4c <main+0x310>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
		 money_category = 0 ;
 8000bdc:	4b50      	ldr	r3, [pc, #320]	@ (8000d20 <main+0x2e4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
		total = 0 ;
 8000be2:	4b56      	ldr	r3, [pc, #344]	@ (8000d3c <main+0x300>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	801a      	strh	r2, [r3, #0]
	    counter = 0;
 8000be8:	4b4c      	ldr	r3, [pc, #304]	@ (8000d1c <main+0x2e0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
		ca5_counter = 0;
 8000bee:	4b52      	ldr	r3, [pc, #328]	@ (8000d38 <main+0x2fc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
		ca50_counter = 0;
 8000bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8000d2c <main+0x2f0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
		ca20_counter = 0;
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8000d30 <main+0x2f4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
		ca100_counter = 0;
 8000c00:	4b49      	ldr	r3, [pc, #292]	@ (8000d28 <main+0x2ec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		ca10_counter = 0;
 8000c06:	4b4b      	ldr	r3, [pc, #300]	@ (8000d34 <main+0x2f8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
		ca200_counter = 0;
 8000c0c:	4b45      	ldr	r3, [pc, #276]	@ (8000d24 <main+0x2e8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
		lcd_4bit_send_command(&lcd_1, _LCD_CLEAR);
 8000c12:	2101      	movs	r1, #1
 8000c14:	4839      	ldr	r0, [pc, #228]	@ (8000cfc <main+0x2c0>)
 8000c16:	f004 f871 	bl	8004cfc <lcd_4bit_send_command>
		lcd_4bit_send_command(&lcd_1, _LCD_CLEAR);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4837      	ldr	r0, [pc, #220]	@ (8000cfc <main+0x2c0>)
 8000c1e:	f004 f86d 	bl	8004cfc <lcd_4bit_send_command>
		lcd_4bit_send_string_pos(&lcd_1, 1, 1, "count:");
 8000c22:	4b3d      	ldr	r3, [pc, #244]	@ (8000d18 <main+0x2dc>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	2101      	movs	r1, #1
 8000c28:	4834      	ldr	r0, [pc, #208]	@ (8000cfc <main+0x2c0>)
 8000c2a:	f004 f8d1 	bl	8004dd0 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd_1, 2, 1, "Total :");
 8000c2e:	4b37      	ldr	r3, [pc, #220]	@ (8000d0c <main+0x2d0>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	2102      	movs	r1, #2
 8000c34:	4831      	ldr	r0, [pc, #196]	@ (8000cfc <main+0x2c0>)
 8000c36:	f004 f8cb 	bl	8004dd0 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd_1, 1, 11, "CA:");
 8000c3a:	4b35      	ldr	r3, [pc, #212]	@ (8000d10 <main+0x2d4>)
 8000c3c:	220b      	movs	r2, #11
 8000c3e:	2101      	movs	r1, #1
 8000c40:	482e      	ldr	r0, [pc, #184]	@ (8000cfc <main+0x2c0>)
 8000c42:	f004 f8c5 	bl	8004dd0 <lcd_4bit_send_string_pos>
	  }

	  if(flag2){
 8000c46:	4b42      	ldr	r3, [pc, #264]	@ (8000d50 <main+0x314>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f43f af20 	beq.w	8000a90 <main+0x54>
		  flag2 = 0;
 8000c50:	4b3f      	ldr	r3, [pc, #252]	@ (8000d50 <main+0x314>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
			lcd_4bit_send_command(&lcd_1, _LCD_CLEAR);
 8000c56:	2101      	movs	r1, #1
 8000c58:	4828      	ldr	r0, [pc, #160]	@ (8000cfc <main+0x2c0>)
 8000c5a:	f004 f84f 	bl	8004cfc <lcd_4bit_send_command>
			lcd_4bit_send_string_pos(&lcd_1, 1, 1, "5 10 20 50 100 2");
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <main+0x318>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	2101      	movs	r1, #1
 8000c64:	4825      	ldr	r0, [pc, #148]	@ (8000cfc <main+0x2c0>)
 8000c66:	f004 f8b3 	bl	8004dd0 <lcd_4bit_send_string_pos>
			convert_uint8_to_string(ca5_counter,ch_5);
 8000c6a:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <main+0x2fc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	493a      	ldr	r1, [pc, #232]	@ (8000d58 <main+0x31c>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 f981 	bl	8004f78 <convert_uint8_to_string>
			lcd_4bit_send_string_pos(&lcd_1, 2, 1,ch_5 );
 8000c76:	4b38      	ldr	r3, [pc, #224]	@ (8000d58 <main+0x31c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	481f      	ldr	r0, [pc, #124]	@ (8000cfc <main+0x2c0>)
 8000c7e:	f004 f8a7 	bl	8004dd0 <lcd_4bit_send_string_pos>
			convert_uint8_to_string(ca10_counter,ch_5);
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <main+0x2f8>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4934      	ldr	r1, [pc, #208]	@ (8000d58 <main+0x31c>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 f975 	bl	8004f78 <convert_uint8_to_string>
			lcd_4bit_send_string_pos(&lcd_1, 2, 3,ch_5);
 8000c8e:	4b32      	ldr	r3, [pc, #200]	@ (8000d58 <main+0x31c>)
 8000c90:	2203      	movs	r2, #3
 8000c92:	2102      	movs	r1, #2
 8000c94:	4819      	ldr	r0, [pc, #100]	@ (8000cfc <main+0x2c0>)
 8000c96:	f004 f89b 	bl	8004dd0 <lcd_4bit_send_string_pos>
			convert_uint8_to_string(ca20_counter,ch_5);
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <main+0x2f4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	492e      	ldr	r1, [pc, #184]	@ (8000d58 <main+0x31c>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 f969 	bl	8004f78 <convert_uint8_to_string>
			lcd_4bit_send_string_pos(&lcd_1, 2, 6,ch_5);
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <main+0x31c>)
 8000ca8:	2206      	movs	r2, #6
 8000caa:	2102      	movs	r1, #2
 8000cac:	4813      	ldr	r0, [pc, #76]	@ (8000cfc <main+0x2c0>)
 8000cae:	f004 f88f 	bl	8004dd0 <lcd_4bit_send_string_pos>
			convert_uint8_to_string(ca50_counter,ch_5);
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <main+0x2f0>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4928      	ldr	r1, [pc, #160]	@ (8000d58 <main+0x31c>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 f95d 	bl	8004f78 <convert_uint8_to_string>
			lcd_4bit_send_string_pos(&lcd_1, 2, 10,ch_5);
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <main+0x31c>)
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <main+0x2c0>)
 8000cc6:	f004 f883 	bl	8004dd0 <lcd_4bit_send_string_pos>
			convert_uint8_to_string(ca100_counter,ch_5);
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <main+0x2ec>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4922      	ldr	r1, [pc, #136]	@ (8000d58 <main+0x31c>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 f951 	bl	8004f78 <convert_uint8_to_string>
			lcd_4bit_send_string_pos(&lcd_1, 2, 13,ch_5);
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <main+0x31c>)
 8000cd8:	220d      	movs	r2, #13
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <main+0x2c0>)
 8000cde:	f004 f877 	bl	8004dd0 <lcd_4bit_send_string_pos>
			convert_uint8_to_string(ca200_counter,ch_5);
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <main+0x2e8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	491c      	ldr	r1, [pc, #112]	@ (8000d58 <main+0x31c>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 f945 	bl	8004f78 <convert_uint8_to_string>
			lcd_4bit_send_string_pos(&lcd_1, 2, 16,ch_5);
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <main+0x31c>)
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4801      	ldr	r0, [pc, #4]	@ (8000cfc <main+0x2c0>)
 8000cf6:	f004 f86b 	bl	8004dd0 <lcd_4bit_send_string_pos>
	  if(!(HAL_GPIO_ReadPin(IR_1_GPIO_Port, IR_1_Pin))){
 8000cfa:	e6c9      	b.n	8000a90 <main+0x54>
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	200000f4 	.word	0x200000f4
 8000d04:	2000013c 	.word	0x2000013c
 8000d08:	08005968 	.word	0x08005968
 8000d0c:	08005970 	.word	0x08005970
 8000d10:	08005978 	.word	0x08005978
 8000d14:	40020400 	.word	0x40020400
 8000d18:	0800597c 	.word	0x0800597c
 8000d1c:	200000f6 	.word	0x200000f6
 8000d20:	200000f5 	.word	0x200000f5
 8000d24:	20000124 	.word	0x20000124
 8000d28:	20000123 	.word	0x20000123
 8000d2c:	20000122 	.word	0x20000122
 8000d30:	20000121 	.word	0x20000121
 8000d34:	20000120 	.word	0x20000120
 8000d38:	2000011f 	.word	0x2000011f
 8000d3c:	2000011c 	.word	0x2000011c
 8000d40:	200000f8 	.word	0x200000f8
 8000d44:	20000110 	.word	0x20000110
 8000d48:	20000104 	.word	0x20000104
 8000d4c:	2000011e 	.word	0x2000011e
 8000d50:	20000134 	.word	0x20000134
 8000d54:	08005984 	.word	0x08005984
 8000d58:	20000128 	.word	0x20000128

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	@ 0x50
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 0320 	add.w	r3, r7, #32
 8000d66:	2230      	movs	r2, #48	@ 0x30
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 f972 	bl	8005054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <SystemClock_Config+0xcc>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <SystemClock_Config+0xcc>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d90:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <SystemClock_Config+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <SystemClock_Config+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000da8:	4a20      	ldr	r2, [pc, #128]	@ (8000e2c <SystemClock_Config+0xd0>)
 8000daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dd0:	2319      	movs	r3, #25
 8000dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dd4:	23a8      	movs	r3, #168	@ 0xa8
 8000dd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fb59 	bl	800349c <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000df0:	f000 f872 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 fdbb 	bl	800398c <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e1c:	f000 f85c 	bl	8000ed8 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	@ 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart2, &BL_data, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4923      	ldr	r1, [pc, #140]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x98>)
 8000e3c:	4823      	ldr	r0, [pc, #140]	@ (8000ecc <HAL_UART_RxCpltCallback+0x9c>)
 8000e3e:	f002 ffd5 	bl	8003dec <HAL_UART_Receive_IT>
	switch (BL_data){
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x98>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3b31      	subs	r3, #49	@ 0x31
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	d839      	bhi.n	8000ec0 <HAL_UART_RxCpltCallback+0x90>
 8000e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <HAL_UART_RxCpltCallback+0x24>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e6d 	.word	0x08000e6d
 8000e58:	08000e7b 	.word	0x08000e7b
 8000e5c:	08000e89 	.word	0x08000e89
 8000e60:	08000e97 	.word	0x08000e97
 8000e64:	08000ea5 	.word	0x08000ea5
 8000e68:	08000eb3 	.word	0x08000eb3
	case '1':
		money_category = 5;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <HAL_UART_RxCpltCallback+0xa0>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
		break;
 8000e78:	e022      	b.n	8000ec0 <HAL_UART_RxCpltCallback+0x90>
	case '2':
		money_category = 10;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_UART_RxCpltCallback+0xa0>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
		break;
 8000e86:	e01b      	b.n	8000ec0 <HAL_UART_RxCpltCallback+0x90>
	case '3':
		money_category = 20;
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_UART_RxCpltCallback+0xa0>)
 8000e8a:	2214      	movs	r2, #20
 8000e8c:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
		break;
 8000e94:	e014      	b.n	8000ec0 <HAL_UART_RxCpltCallback+0x90>
	case '4':
		money_category = 50;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_UART_RxCpltCallback+0xa0>)
 8000e98:	2232      	movs	r2, #50	@ 0x32
 8000e9a:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
		break;
 8000ea2:	e00d      	b.n	8000ec0 <HAL_UART_RxCpltCallback+0x90>
	case '5':
		money_category = 100;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_UART_RxCpltCallback+0xa0>)
 8000ea6:	2264      	movs	r2, #100	@ 0x64
 8000ea8:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_UART_RxCpltCallback+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
		break;
 8000eb0:	e006      	b.n	8000ec0 <HAL_UART_RxCpltCallback+0x90>
	case '6':
		money_category = 200;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_UART_RxCpltCallback+0xa0>)
 8000eb4:	22c8      	movs	r2, #200	@ 0xc8
 8000eb6:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_UART_RxCpltCallback+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
		break;
 8000ebe:	bf00      	nop

	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000f4 	.word	0x200000f4
 8000ecc:	2000013c 	.word	0x2000013c
 8000ed0:	200000f5 	.word	0x200000f5
 8000ed4:	200000f6 	.word	0x200000f6

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <Error_Handler+0x8>

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f98d 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 fd32 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f000 fd2b 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}

08000fae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f000 fd24 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000fc0:	2008      	movs	r0, #8
 8000fc2:	f000 fd1d 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000fce:	2010      	movs	r0, #16
 8000fd0:	f000 fd16 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000fdc:	2020      	movs	r0, #32
 8000fde:	f000 fd0f 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000fe2:	2040      	movs	r0, #64	@ 0x40
 8000fe4:	f000 fd0c 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fe8:	2080      	movs	r0, #128	@ 0x80
 8000fea:	f000 fd09 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000fee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000ff2:	f000 fd05 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000ff6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ffa:	f000 fd01 	bl	8001a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <I2C1_EV_IRQHandler+0x10>)
 800100a:	f000 fe6a 	bl	8001ce2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000a0 	.word	0x200000a0

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f002 ff0b 	bl	8003e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000013c 	.word	0x2000013c

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f004 f802 	bl	8005064 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20010000 	.word	0x20010000
 800108c:	00000400 	.word	0x00000400
 8001090:	20000138 	.word	0x20000138
 8001094:	200002d0 	.word	0x200002d0

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_USART2_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010f4:	f002 fe2a 	bl	8003d4c <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f7ff feeb 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000013c 	.word	0x2000013c
 800110c:	40004400 	.word	0x40004400

08001110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <HAL_UART_MspInit+0x94>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d133      	bne.n	800119a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_UART_MspInit+0x98>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a1b      	ldr	r2, [pc, #108]	@ (80011a8 <HAL_UART_MspInit+0x98>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_UART_MspInit+0x98>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_UART_MspInit+0x98>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <HAL_UART_MspInit+0x98>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_UART_MspInit+0x98>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800116a:	230c      	movs	r3, #12
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117a:	2307      	movs	r3, #7
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4809      	ldr	r0, [pc, #36]	@ (80011ac <HAL_UART_MspInit+0x9c>)
 8001186:	f000 fa85 	bl	8001694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2026      	movs	r0, #38	@ 0x26
 8001190:	f000 f9a9 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001194:	2026      	movs	r0, #38	@ 0x26
 8001196:	f000 f9c2 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	@ 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40004400 	.word	0x40004400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011b4:	f7ff ff70 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	@ (80011f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	@ (80011fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f003 ff47 	bl	8005070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fc2b 	bl	8000a3c <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80011f4:	080059f8 	.word	0x080059f8
  ldr r2, =_sbss
 80011f8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80011fc:	200002d0 	.word	0x200002d0

08001200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <HAL_Init+0x40>)
 800120e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_Init+0x40>)
 800121a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800121e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <HAL_Init+0x40>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f94f 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fe54 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f967 	bl	800153a <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f92f 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000184 	.word	0x20000184

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000184 	.word	0x20000184

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	@ (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	@ (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	@ (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	@ 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	@ 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff29 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff3e 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff8e 	bl	8001424 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff31 	bl	8001394 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff feb6 	bl	80012d0 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d008      	beq.n	8001584 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e052      	b.n	800162a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0216 	bic.w	r2, r2, #22
 8001592:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d103      	bne.n	80015b4 <HAL_DMA_Abort+0x62>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0208 	bic.w	r2, r2, #8
 80015c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d4:	e013      	b.n	80015fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d6:	f7ff fe7b 	bl	80012d0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d90c      	bls.n	80015fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2220      	movs	r2, #32
 80015e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e015      	b.n	800162a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e4      	bne.n	80015d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001610:	223f      	movs	r2, #63	@ 0x3f
 8001612:	409a      	lsls	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d004      	beq.n	8001650 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2280      	movs	r2, #128	@ 0x80
 800164a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e00c      	b.n	800166a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2205      	movs	r2, #5
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001684:	b2db      	uxtb	r3, r3
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e159      	b.n	8001964 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 8148 	bne.w	800195e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d005      	beq.n	80016e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d130      	bne.n	8001748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 0201 	and.w	r2, r3, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b03      	cmp	r3, #3
 8001752:	d017      	beq.n	8001784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d123      	bne.n	80017d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0203 	and.w	r2, r3, #3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80a2 	beq.w	800195e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b57      	ldr	r3, [pc, #348]	@ (800197c <HAL_GPIO_Init+0x2e8>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	4a56      	ldr	r2, [pc, #344]	@ (800197c <HAL_GPIO_Init+0x2e8>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001828:	6453      	str	r3, [r2, #68]	@ 0x44
 800182a:	4b54      	ldr	r3, [pc, #336]	@ (800197c <HAL_GPIO_Init+0x2e8>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001836:	4a52      	ldr	r2, [pc, #328]	@ (8001980 <HAL_GPIO_Init+0x2ec>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a49      	ldr	r2, [pc, #292]	@ (8001984 <HAL_GPIO_Init+0x2f0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x202>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a48      	ldr	r2, [pc, #288]	@ (8001988 <HAL_GPIO_Init+0x2f4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x1fe>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a47      	ldr	r2, [pc, #284]	@ (800198c <HAL_GPIO_Init+0x2f8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x1fa>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a46      	ldr	r2, [pc, #280]	@ (8001990 <HAL_GPIO_Init+0x2fc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x1f6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a45      	ldr	r2, [pc, #276]	@ (8001994 <HAL_GPIO_Init+0x300>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x1f2>
 8001882:	2304      	movs	r3, #4
 8001884:	e008      	b.n	8001898 <HAL_GPIO_Init+0x204>
 8001886:	2307      	movs	r3, #7
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x204>
 800188a:	2303      	movs	r3, #3
 800188c:	e004      	b.n	8001898 <HAL_GPIO_Init+0x204>
 800188e:	2302      	movs	r3, #2
 8001890:	e002      	b.n	8001898 <HAL_GPIO_Init+0x204>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x204>
 8001896:	2300      	movs	r3, #0
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	f002 0203 	and.w	r2, r2, #3
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	4093      	lsls	r3, r2
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a8:	4935      	ldr	r1, [pc, #212]	@ (8001980 <HAL_GPIO_Init+0x2ec>)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b6:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <HAL_GPIO_Init+0x304>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018da:	4a2f      	ldr	r2, [pc, #188]	@ (8001998 <HAL_GPIO_Init+0x304>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <HAL_GPIO_Init+0x304>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001904:	4a24      	ldr	r2, [pc, #144]	@ (8001998 <HAL_GPIO_Init+0x304>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190a:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <HAL_GPIO_Init+0x304>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192e:	4a1a      	ldr	r2, [pc, #104]	@ (8001998 <HAL_GPIO_Init+0x304>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <HAL_GPIO_Init+0x304>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001958:	4a0f      	ldr	r2, [pc, #60]	@ (8001998 <HAL_GPIO_Init+0x304>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3301      	adds	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b0f      	cmp	r3, #15
 8001968:	f67f aea2 	bls.w	80016b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3724      	adds	r7, #36	@ 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40013800 	.word	0x40013800
 8001984:	40020000 	.word	0x40020000
 8001988:	40020400 	.word	0x40020400
 800198c:	40020800 	.word	0x40020800
 8001990:	40020c00 	.word	0x40020c00
 8001994:	40021000 	.word	0x40021000
 8001998:	40013c00 	.word	0x40013c00

0800199c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e8:	e003      	b.n	80019f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe feec 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40013c00 	.word	0x40013c00

08001a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e12b      	b.n	8001c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe fe80 	bl	800075c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2224      	movs	r2, #36	@ 0x24
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a94:	f002 f932 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8001a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a81      	ldr	r2, [pc, #516]	@ (8001ca4 <HAL_I2C_Init+0x274>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d807      	bhi.n	8001ab4 <HAL_I2C_Init+0x84>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a80      	ldr	r2, [pc, #512]	@ (8001ca8 <HAL_I2C_Init+0x278>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e006      	b.n	8001ac2 <HAL_I2C_Init+0x92>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a7d      	ldr	r2, [pc, #500]	@ (8001cac <HAL_I2C_Init+0x27c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	bf94      	ite	ls
 8001abc:	2301      	movls	r3, #1
 8001abe:	2300      	movhi	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0e7      	b.n	8001c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4a78      	ldr	r2, [pc, #480]	@ (8001cb0 <HAL_I2C_Init+0x280>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0c9b      	lsrs	r3, r3, #18
 8001ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a6a      	ldr	r2, [pc, #424]	@ (8001ca4 <HAL_I2C_Init+0x274>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d802      	bhi.n	8001b04 <HAL_I2C_Init+0xd4>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3301      	adds	r3, #1
 8001b02:	e009      	b.n	8001b18 <HAL_I2C_Init+0xe8>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	4a69      	ldr	r2, [pc, #420]	@ (8001cb4 <HAL_I2C_Init+0x284>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	3301      	adds	r3, #1
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	495c      	ldr	r1, [pc, #368]	@ (8001ca4 <HAL_I2C_Init+0x274>)
 8001b34:	428b      	cmp	r3, r1
 8001b36:	d819      	bhi.n	8001b6c <HAL_I2C_Init+0x13c>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e59      	subs	r1, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b46:	1c59      	adds	r1, r3, #1
 8001b48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00a      	beq.n	8001b68 <HAL_I2C_Init+0x138>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e59      	subs	r1, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b66:	e051      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e04f      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d111      	bne.n	8001b98 <HAL_I2C_Init+0x168>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e012      	b.n	8001bbe <HAL_I2C_Init+0x18e>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e58      	subs	r0, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	0099      	lsls	r1, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Init+0x196>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e022      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10e      	bne.n	8001bec <HAL_I2C_Init+0x1bc>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1e58      	subs	r0, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	440b      	add	r3, r1
 8001bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bea:	e00f      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	0099      	lsls	r1, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	6809      	ldr	r1, [r1, #0]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6911      	ldr	r1, [r2, #16]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68d2      	ldr	r2, [r2, #12]
 8001c46:	4311      	orrs	r1, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	000186a0 	.word	0x000186a0
 8001ca8:	001e847f 	.word	0x001e847f
 8001cac:	003d08ff 	.word	0x003d08ff
 8001cb0:	431bde83 	.word	0x431bde83
 8001cb4:	10624dd3 	.word	0x10624dd3

08001cb8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cca:	2b80      	cmp	r3, #128	@ 0x80
 8001ccc:	d103      	bne.n	8001cd6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b088      	sub	sp, #32
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d003      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x38>
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b40      	cmp	r3, #64	@ 0x40
 8001d16:	f040 80c1 	bne.w	8001e9c <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_I2C_EV_IRQHandler+0x6e>
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001d3a:	d003      	beq.n	8001d44 <HAL_I2C_EV_IRQHandler+0x62>
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001d42:	d101      	bne.n	8001d48 <HAL_I2C_EV_IRQHandler+0x66>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_I2C_EV_IRQHandler+0x68>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	f000 8132 	beq.w	8001fb4 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_I2C_EV_IRQHandler+0x92>
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	0a5b      	lsrs	r3, r3, #9
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f001 fb7c 	bl	8003464 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fcf4 	bl	800275a <I2C_Master_SB>
 8001d72:	e092      	b.n	8001e9a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08db      	lsrs	r3, r3, #3
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d009      	beq.n	8001d94 <HAL_I2C_EV_IRQHandler+0xb2>
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	0a5b      	lsrs	r3, r3, #9
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fd6a 	bl	8002866 <I2C_Master_ADD10>
 8001d92:	e082      	b.n	8001e9a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <HAL_I2C_EV_IRQHandler+0xd2>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	0a5b      	lsrs	r3, r3, #9
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fd84 	bl	80028ba <I2C_Master_ADDR>
 8001db2:	e072      	b.n	8001e9a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d03b      	beq.n	8001e38 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dce:	f000 80f3 	beq.w	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	09db      	lsrs	r3, r3, #7
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00f      	beq.n	8001dfe <HAL_I2C_EV_IRQHandler+0x11c>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	0a9b      	lsrs	r3, r3, #10
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_I2C_EV_IRQHandler+0x11c>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f94c 	bl	8002094 <I2C_MasterTransmit_TXE>
 8001dfc:	e04d      	b.n	8001e9a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80d6 	beq.w	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	0a5b      	lsrs	r3, r3, #9
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80cf 	beq.w	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	2b21      	cmp	r3, #33	@ 0x21
 8001e1e:	d103      	bne.n	8001e28 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f9d3 	bl	80021cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e26:	e0c7      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	f040 80c4 	bne.w	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fa41 	bl	80022b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	e0bf      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e46:	f000 80b7 	beq.w	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00f      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0x194>
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	0a9b      	lsrs	r3, r3, #10
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0x194>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 faba 	bl	80023e8 <I2C_MasterReceive_RXNE>
 8001e74:	e011      	b.n	8001e9a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 809a 	beq.w	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	0a5b      	lsrs	r3, r3, #9
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8093 	beq.w	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fb70 	bl	8002578 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e98:	e08e      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e9a:	e08d      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	e007      	b.n	8001ebe <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <HAL_I2C_EV_IRQHandler+0x20e>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	0a5b      	lsrs	r3, r3, #9
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 ff35 	bl	8002d58 <I2C_Slave_ADDR>
 8001eee:	e066      	b.n	8001fbe <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_I2C_EV_IRQHandler+0x22e>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	0a5b      	lsrs	r3, r3, #9
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 ff6f 	bl	8002dec <I2C_Slave_STOPF>
 8001f0e:	e056      	b.n	8001fbe <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	2b21      	cmp	r3, #33	@ 0x21
 8001f14:	d002      	beq.n	8001f1c <HAL_I2C_EV_IRQHandler+0x23a>
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	2b29      	cmp	r3, #41	@ 0x29
 8001f1a:	d125      	bne.n	8001f68 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	09db      	lsrs	r3, r3, #7
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00f      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x266>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	0a9b      	lsrs	r3, r3, #10
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x266>
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fe4b 	bl	8002bdc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f46:	e039      	b.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d033      	beq.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2da>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d02d      	beq.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fe78 	bl	8002c56 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f66:	e029      	b.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	099b      	lsrs	r3, r3, #6
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00f      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fe83 	bl	8002c98 <I2C_SlaveReceive_RXNE>
 8001f92:	e014      	b.n	8001fbe <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <HAL_I2C_EV_IRQHandler+0x2dc>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	0a5b      	lsrs	r3, r3, #9
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 feb1 	bl	8002d14 <I2C_SlaveReceive_BTF>
 8001fb2:	e004      	b.n	8001fbe <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001fb4:	bf00      	nop
 8001fb6:	e002      	b.n	8001fbe <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb8:	bf00      	nop
 8001fba:	e000      	b.n	8001fbe <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fbc:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
 8002020:	4613      	mov	r3, r2
 8002022:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d150      	bne.n	800215c <I2C_MasterTransmit_TXE+0xc8>
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b21      	cmp	r3, #33	@ 0x21
 80020be:	d14d      	bne.n	800215c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d01d      	beq.n	8002102 <I2C_MasterTransmit_TXE+0x6e>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d01a      	beq.n	8002102 <I2C_MasterTransmit_TXE+0x6e>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020d2:	d016      	beq.n	8002102 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2211      	movs	r2, #17
 80020e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ff62 	bl	8001fc4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002100:	e060      	b.n	80021c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002110:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002120:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b40      	cmp	r3, #64	@ 0x40
 800213a:	d107      	bne.n	800214c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff7d 	bl	8002044 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800214a:	e03b      	b.n	80021c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff35 	bl	8001fc4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800215a:	e033      	b.n	80021c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b21      	cmp	r3, #33	@ 0x21
 8002160:	d005      	beq.n	800216e <I2C_MasterTransmit_TXE+0xda>
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	2b40      	cmp	r3, #64	@ 0x40
 8002166:	d12d      	bne.n	80021c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b22      	cmp	r3, #34	@ 0x22
 800216c:	d12a      	bne.n	80021c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d108      	bne.n	800218a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002186:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002188:	e01c      	b.n	80021c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b40      	cmp	r3, #64	@ 0x40
 8002194:	d103      	bne.n	800219e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f88e 	bl	80022b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800219c:	e012      	b.n	80021c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80021c2:	e7ff      	b.n	80021c4 <I2C_MasterTransmit_TXE+0x130>
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b21      	cmp	r3, #33	@ 0x21
 80021e4:	d164      	bne.n	80022b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d012      	beq.n	8002216 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002214:	e04c      	b.n	80022b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d01d      	beq.n	8002258 <I2C_MasterTransmit_BTF+0x8c>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b20      	cmp	r3, #32
 8002220:	d01a      	beq.n	8002258 <I2C_MasterTransmit_BTF+0x8c>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002228:	d016      	beq.n	8002258 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002238:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2211      	movs	r2, #17
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff feb7 	bl	8001fc4 <HAL_I2C_MasterTxCpltCallback>
}
 8002256:	e02b      	b.n	80022b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002266:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b40      	cmp	r3, #64	@ 0x40
 8002290:	d107      	bne.n	80022a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fed2 	bl	8002044 <HAL_I2C_MemTxCpltCallback>
}
 80022a0:	e006      	b.n	80022b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fe8a 	bl	8001fc4 <HAL_I2C_MasterTxCpltCallback>
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d11d      	bne.n	800230c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10b      	bne.n	80022f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e8:	1c9a      	adds	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80022ee:	e077      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	121b      	asrs	r3, r3, #8
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800230a:	e069      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002310:	2b01      	cmp	r3, #1
 8002312:	d10b      	bne.n	800232c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002318:	b2da      	uxtb	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800232a:	e059      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002330:	2b02      	cmp	r3, #2
 8002332:	d152      	bne.n	80023da <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b22      	cmp	r3, #34	@ 0x22
 8002338:	d10d      	bne.n	8002356 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002348:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002354:	e044      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d015      	beq.n	800238c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	2b21      	cmp	r3, #33	@ 0x21
 8002364:	d112      	bne.n	800238c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800238a:	e029      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d124      	bne.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b21      	cmp	r3, #33	@ 0x21
 800239a:	d121      	bne.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fe36 	bl	8002044 <HAL_I2C_MemTxCpltCallback>
}
 80023d8:	e002      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fc6c 	bl	8001cb8 <I2C_Flush_DR>
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b22      	cmp	r3, #34	@ 0x22
 80023fa:	f040 80b9 	bne.w	8002570 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d921      	bls.n	8002456 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b03      	cmp	r3, #3
 8002440:	f040 8096 	bne.w	8002570 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002452:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002454:	e08c      	b.n	8002570 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	2b02      	cmp	r3, #2
 800245c:	d07f      	beq.n	800255e <I2C_MasterReceive_RXNE+0x176>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d002      	beq.n	800246a <I2C_MasterReceive_RXNE+0x82>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d179      	bne.n	800255e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 ffc8 	bl	8003400 <I2C_WaitOnSTOPRequestThroughIT>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d14c      	bne.n	8002510 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002484:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002494:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b40      	cmp	r3, #64	@ 0x40
 80024ce:	d10a      	bne.n	80024e6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fdba 	bl	8002058 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024e4:	e044      	b.n	8002570 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d002      	beq.n	80024fa <I2C_MasterReceive_RXNE+0x112>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d103      	bne.n	8002502 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002500:	e002      	b.n	8002508 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2212      	movs	r2, #18
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff fd65 	bl	8001fd8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800250e:	e02f      	b.n	8002570 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800251e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fd88 	bl	800206c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800255c:	e008      	b.n	8002570 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256c:	605a      	str	r2, [r3, #4]
}
 800256e:	e7ff      	b.n	8002570 <I2C_MasterReceive_RXNE+0x188>
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b04      	cmp	r3, #4
 800258e:	d11b      	bne.n	80025c8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025c6:	e0c4      	b.n	8002752 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d129      	bne.n	8002626 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d00a      	beq.n	80025fe <I2C_MasterReceive_BTF+0x86>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d007      	beq.n	80025fe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002624:	e095      	b.n	8002752 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d17d      	bne.n	800272c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d002      	beq.n	800263c <I2C_MasterReceive_BTF+0xc4>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b10      	cmp	r3, #16
 800263a:	d108      	bne.n	800264e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e016      	b.n	800267c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d002      	beq.n	800265a <I2C_MasterReceive_BTF+0xe2>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d108      	bne.n	800266c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e007      	b.n	800267c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b40      	cmp	r3, #64	@ 0x40
 80026ea:	d10a      	bne.n	8002702 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fcac 	bl	8002058 <HAL_I2C_MemRxCpltCallback>
}
 8002700:	e027      	b.n	8002752 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d002      	beq.n	8002716 <I2C_MasterReceive_BTF+0x19e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d103      	bne.n	800271e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
 800271c:	e002      	b.n	8002724 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2212      	movs	r2, #18
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff fc57 	bl	8001fd8 <HAL_I2C_MasterRxCpltCallback>
}
 800272a:	e012      	b.n	8002752 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b40      	cmp	r3, #64	@ 0x40
 800276c:	d117      	bne.n	800279e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002786:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002788:	e067      	b.n	800285a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]
}
 800279c:	e05d      	b.n	800285a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027a6:	d133      	bne.n	8002810 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b21      	cmp	r3, #33	@ 0x21
 80027b2:	d109      	bne.n	80027c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027c4:	611a      	str	r2, [r3, #16]
 80027c6:	e008      	b.n	80027da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <I2C_Master_SB+0x92>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d108      	bne.n	80027fe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d032      	beq.n	800285a <I2C_Master_SB+0x100>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02d      	beq.n	800285a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800280c:	605a      	str	r2, [r3, #4]
}
 800280e:	e024      	b.n	800285a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10e      	bne.n	8002836 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	b29b      	uxth	r3, r3
 800281e:	11db      	asrs	r3, r3, #7
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 0306 	and.w	r3, r3, #6
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f063 030f 	orn	r3, r3, #15
 800282c:	b2da      	uxtb	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]
}
 8002834:	e011      	b.n	800285a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10d      	bne.n	800285a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	b29b      	uxth	r3, r3
 8002844:	11db      	asrs	r3, r3, #7
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 0306 	and.w	r3, r3, #6
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f063 030e 	orn	r3, r3, #14
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	611a      	str	r2, [r3, #16]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	b2da      	uxtb	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <I2C_Master_ADD10+0x26>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <I2C_Master_ADD10+0x48>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028ac:	605a      	str	r2, [r3, #4]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b091      	sub	sp, #68	@ 0x44
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b22      	cmp	r3, #34	@ 0x22
 80028e2:	f040 8169 	bne.w	8002bb8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <I2C_Master_ADDR+0x54>
 80028ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80028f2:	2b40      	cmp	r3, #64	@ 0x40
 80028f4:	d10b      	bne.n	800290e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	633b      	str	r3, [r7, #48]	@ 0x30
 800290a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290c:	e160      	b.n	8002bd0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002912:	2b00      	cmp	r3, #0
 8002914:	d11d      	bne.n	8002952 <I2C_Master_ADDR+0x98>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800291e:	d118      	bne.n	8002952 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002944:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002950:	e13e      	b.n	8002bd0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d113      	bne.n	8002984 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295c:	2300      	movs	r3, #0
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002970:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e115      	b.n	8002bb0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	f040 808a 	bne.w	8002aa4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002992:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002996:	d137      	bne.n	8002a08 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029b6:	d113      	bne.n	80029e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	e0e7      	b.n	8002bb0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	623b      	str	r3, [r7, #32]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e0d3      	b.n	8002bb0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d02e      	beq.n	8002a6c <I2C_Master_ADDR+0x1b2>
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d02b      	beq.n	8002a6c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a16:	2b12      	cmp	r3, #18
 8002a18:	d102      	bne.n	8002a20 <I2C_Master_ADDR+0x166>
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d125      	bne.n	8002a6c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d00e      	beq.n	8002a44 <I2C_Master_ADDR+0x18a>
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d00b      	beq.n	8002a44 <I2C_Master_ADDR+0x18a>
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d008      	beq.n	8002a44 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e007      	b.n	8002a54 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a52:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	e0a1      	b.n	8002bb0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e085      	b.n	8002bb0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d14d      	bne.n	8002b4a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d016      	beq.n	8002ae2 <I2C_Master_ADDR+0x228>
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d013      	beq.n	8002ae2 <I2C_Master_ADDR+0x228>
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d010      	beq.n	8002ae2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ace:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e007      	b.n	8002af2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002af0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b00:	d117      	bne.n	8002b32 <I2C_Master_ADDR+0x278>
 8002b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b08:	d00b      	beq.n	8002b22 <I2C_Master_ADDR+0x268>
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d008      	beq.n	8002b22 <I2C_Master_ADDR+0x268>
 8002b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d005      	beq.n	8002b22 <I2C_Master_ADDR+0x268>
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d002      	beq.n	8002b22 <I2C_Master_ADDR+0x268>
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d107      	bne.n	8002b32 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b30:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	e032      	b.n	8002bb0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b58:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b68:	d117      	bne.n	8002b9a <I2C_Master_ADDR+0x2e0>
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b70:	d00b      	beq.n	8002b8a <I2C_Master_ADDR+0x2d0>
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d008      	beq.n	8002b8a <I2C_Master_ADDR+0x2d0>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d005      	beq.n	8002b8a <I2C_Master_ADDR+0x2d0>
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d002      	beq.n	8002b8a <I2C_Master_ADDR+0x2d0>
 8002b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d107      	bne.n	8002b9a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002bb6:	e00b      	b.n	8002bd0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
}
 8002bce:	e7ff      	b.n	8002bd0 <I2C_Master_ADDR+0x316>
 8002bd0:	bf00      	nop
 8002bd2:	3744      	adds	r7, #68	@ 0x44
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d02b      	beq.n	8002c4e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d114      	bne.n	8002c4e <I2C_SlaveTransmit_TXE+0x72>
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b29      	cmp	r3, #41	@ 0x29
 8002c28:	d111      	bne.n	8002c4e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c38:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2221      	movs	r2, #33	@ 0x21
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2228      	movs	r2, #40	@ 0x28
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff f9cf 	bl	8001fec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d011      	beq.n	8002c8c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d02c      	beq.n	8002d0c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d114      	bne.n	8002d0c <I2C_SlaveReceive_RXNE+0x74>
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ce6:	d111      	bne.n	8002d0c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2222      	movs	r2, #34	@ 0x22
 8002cfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2228      	movs	r2, #40	@ 0x28
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff f97a 	bl	8002000 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d72:	2b28      	cmp	r3, #40	@ 0x28
 8002d74:	d127      	bne.n	8002dc6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d84:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	09db      	lsrs	r3, r3, #7
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	81bb      	strh	r3, [r7, #12]
 8002da8:	e002      	b.n	8002db0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002db8:	89ba      	ldrh	r2, [r7, #12]
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff f928 	bl	8002014 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dc4:	e00e      	b.n	8002de4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e48:	d172      	bne.n	8002f30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b22      	cmp	r3, #34	@ 0x22
 8002e4e:	d002      	beq.n	8002e56 <I2C_Slave_STOPF+0x6a>
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e54:	d135      	bne.n	8002ec2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f043 0204 	orr.w	r2, r3, #4
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fbf1 	bl	8001676 <HAL_DMA_GetState>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d049      	beq.n	8002f2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9e:	4a69      	ldr	r2, [pc, #420]	@ (8003044 <I2C_Slave_STOPF+0x258>)
 8002ea0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fbc3 	bl	8001632 <HAL_DMA_Abort_IT>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d03d      	beq.n	8002f2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ec0:	e035      	b.n	8002f2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	f043 0204 	orr.w	r2, r3, #4
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fbbb 	bl	8001676 <HAL_DMA_GetState>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d014      	beq.n	8002f30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003044 <I2C_Slave_STOPF+0x258>)
 8002f0c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fb8d 	bl	8001632 <HAL_DMA_Abort_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4798      	blx	r3
 8002f2c:	e000      	b.n	8002f30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d03e      	beq.n	8002fb8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d112      	bne.n	8002f6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f78:	2b40      	cmp	r3, #64	@ 0x40
 8002f7a:	d112      	bne.n	8002fa2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f043 0204 	orr.w	r2, r3, #4
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f843 	bl	800304c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002fc6:	e039      	b.n	800303c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fcc:	d109      	bne.n	8002fe2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2228      	movs	r2, #40	@ 0x28
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff f80f 	bl	8002000 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b28      	cmp	r3, #40	@ 0x28
 8002fec:	d111      	bne.n	8003012 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	@ (8003048 <I2C_Slave_STOPF+0x25c>)
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff f810 	bl	8002030 <HAL_I2C_ListenCpltCallback>
}
 8003010:	e014      	b.n	800303c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	2b22      	cmp	r3, #34	@ 0x22
 8003018:	d002      	beq.n	8003020 <I2C_Slave_STOPF+0x234>
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b22      	cmp	r3, #34	@ 0x22
 800301e:	d10d      	bne.n	800303c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe ffe2 	bl	8002000 <HAL_I2C_SlaveRxCpltCallback>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	080032b1 	.word	0x080032b1
 8003048:	ffff0000 	.word	0xffff0000

0800304c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003062:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003064:	7bbb      	ldrb	r3, [r7, #14]
 8003066:	2b10      	cmp	r3, #16
 8003068:	d002      	beq.n	8003070 <I2C_ITError+0x24>
 800306a:	7bbb      	ldrb	r3, [r7, #14]
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d10a      	bne.n	8003086 <I2C_ITError+0x3a>
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b22      	cmp	r3, #34	@ 0x22
 8003074:	d107      	bne.n	8003086 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003084:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800308c:	2b28      	cmp	r3, #40	@ 0x28
 800308e:	d107      	bne.n	80030a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2228      	movs	r2, #40	@ 0x28
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800309e:	e015      	b.n	80030cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ae:	d00a      	beq.n	80030c6 <I2C_ITError+0x7a>
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b60      	cmp	r3, #96	@ 0x60
 80030b4:	d007      	beq.n	80030c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030da:	d162      	bne.n	80031a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d020      	beq.n	800313c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fe:	4a6a      	ldr	r2, [pc, #424]	@ (80032a8 <I2C_ITError+0x25c>)
 8003100:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fa93 	bl	8001632 <HAL_DMA_Abort_IT>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8089 	beq.w	8003226 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003136:	4610      	mov	r0, r2
 8003138:	4798      	blx	r3
 800313a:	e074      	b.n	8003226 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	4a59      	ldr	r2, [pc, #356]	@ (80032a8 <I2C_ITError+0x25c>)
 8003142:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe fa72 	bl	8001632 <HAL_DMA_Abort_IT>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d068      	beq.n	8003226 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315e:	2b40      	cmp	r3, #64	@ 0x40
 8003160:	d10b      	bne.n	800317a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800319c:	4610      	mov	r0, r2
 800319e:	4798      	blx	r3
 80031a0:	e041      	b.n	8003226 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b60      	cmp	r3, #96	@ 0x60
 80031ac:	d125      	bne.n	80031fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d10b      	bne.n	80031e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe ff44 	bl	8002080 <HAL_I2C_AbortCpltCallback>
 80031f8:	e015      	b.n	8003226 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b40      	cmp	r3, #64	@ 0x40
 8003206:	d10b      	bne.n	8003220 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fe ff23 	bl	800206c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10e      	bne.n	8003254 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003262:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d113      	bne.n	80032a0 <I2C_ITError+0x254>
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b28      	cmp	r3, #40	@ 0x28
 800327c:	d110      	bne.n	80032a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <I2C_ITError+0x260>)
 8003282:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fec8 	bl	8002030 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	080032b1 	.word	0x080032b1
 80032ac:	ffff0000 	.word	0xffff0000

080032b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032ca:	4b4b      	ldr	r3, [pc, #300]	@ (80033f8 <I2C_DMAAbort+0x148>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	08db      	lsrs	r3, r3, #3
 80032d0:	4a4a      	ldr	r2, [pc, #296]	@ (80033fc <I2C_DMAAbort+0x14c>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0a1a      	lsrs	r2, r3, #8
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00da      	lsls	r2, r3, #3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80032f6:	e00a      	b.n	800330e <I2C_DMAAbort+0x5e>
    }
    count--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800330c:	d0ea      	beq.n	80032e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331a:	2200      	movs	r2, #0
 800331c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	2200      	movs	r2, #0
 800332c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800333c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003350:	2200      	movs	r2, #0
 8003352:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	2200      	movs	r2, #0
 8003362:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b60      	cmp	r3, #96	@ 0x60
 800337e:	d10e      	bne.n	800339e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2200      	movs	r2, #0
 8003394:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7fe fe72 	bl	8002080 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800339c:	e027      	b.n	80033ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033a4:	2b28      	cmp	r3, #40	@ 0x28
 80033a6:	d117      	bne.n	80033d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2200      	movs	r2, #0
 80033cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2228      	movs	r2, #40	@ 0x28
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80033d6:	e007      	b.n	80033e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80033e8:	6978      	ldr	r0, [r7, #20]
 80033ea:	f7fe fe3f 	bl	800206c <HAL_I2C_ErrorCallback>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000000 	.word	0x20000000
 80033fc:	14f8b589 	.word	0x14f8b589

08003400 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800340c:	4b13      	ldr	r3, [pc, #76]	@ (800345c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	08db      	lsrs	r3, r3, #3
 8003412:	4a13      	ldr	r2, [pc, #76]	@ (8003460 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	0a1a      	lsrs	r2, r3, #8
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3b01      	subs	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f043 0220 	orr.w	r2, r3, #32
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e008      	b.n	8003450 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800344c:	d0e9      	beq.n	8003422 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	20000000 	.word	0x20000000
 8003460:	14f8b589 	.word	0x14f8b589

08003464 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003474:	d103      	bne.n	800347e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800347c:	e007      	b.n	800348e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003486:	d102      	bne.n	800348e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2208      	movs	r2, #8
 800348c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e267      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d075      	beq.n	80035a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ba:	4b88      	ldr	r3, [pc, #544]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d00c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c6:	4b85      	ldr	r3, [pc, #532]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d112      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d2:	4b82      	ldr	r3, [pc, #520]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034de:	d10b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	4b7e      	ldr	r3, [pc, #504]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05b      	beq.n	80035a4 <HAL_RCC_OscConfig+0x108>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d157      	bne.n	80035a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e242      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x74>
 8003502:	4b76      	ldr	r3, [pc, #472]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a75      	ldr	r2, [pc, #468]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x98>
 800351a:	4b70      	ldr	r3, [pc, #448]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6f      	ldr	r2, [pc, #444]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b6d      	ldr	r3, [pc, #436]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6c      	ldr	r2, [pc, #432]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003534:	4b69      	ldr	r3, [pc, #420]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a68      	ldr	r2, [pc, #416]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b66      	ldr	r3, [pc, #408]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a65      	ldr	r2, [pc, #404]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800354a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fd febc 	bl	80012d0 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fd feb8 	bl	80012d0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e207      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b5b      	ldr	r3, [pc, #364]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xc0>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd fea8 	bl	80012d0 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fd fea4 	bl	80012d0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1f3      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	4b51      	ldr	r3, [pc, #324]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0xe8>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d063      	beq.n	800367a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035b2:	4b4a      	ldr	r3, [pc, #296]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035be:	4b47      	ldr	r3, [pc, #284]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d11c      	bne.n	8003604 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ca:	4b44      	ldr	r3, [pc, #272]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_RCC_OscConfig+0x152>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1c7      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ee:	4b3b      	ldr	r3, [pc, #236]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4937      	ldr	r1, [pc, #220]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	e03a      	b.n	800367a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360c:	4b34      	ldr	r3, [pc, #208]	@ (80036e0 <HAL_RCC_OscConfig+0x244>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fd fe5d 	bl	80012d0 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361a:	f7fd fe59 	bl	80012d0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1a8      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4925      	ldr	r1, [pc, #148]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364e:	4b24      	ldr	r3, [pc, #144]	@ (80036e0 <HAL_RCC_OscConfig+0x244>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fe3c 	bl	80012d0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365c:	f7fd fe38 	bl	80012d0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e187      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d036      	beq.n	80036f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368e:	4b15      	ldr	r3, [pc, #84]	@ (80036e4 <HAL_RCC_OscConfig+0x248>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fd fe1c 	bl	80012d0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369c:	f7fd fe18 	bl	80012d0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e167      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_OscConfig+0x240>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x200>
 80036ba:	e01b      	b.n	80036f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036bc:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <HAL_RCC_OscConfig+0x248>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7fd fe05 	bl	80012d0 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	e00e      	b.n	80036e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ca:	f7fd fe01 	bl	80012d0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d907      	bls.n	80036e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e150      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
 80036dc:	40023800 	.word	0x40023800
 80036e0:	42470000 	.word	0x42470000
 80036e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e8:	4b88      	ldr	r3, [pc, #544]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ea      	bne.n	80036ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8097 	beq.w	8003830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003706:	4b81      	ldr	r3, [pc, #516]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10f      	bne.n	8003732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	4b7d      	ldr	r3, [pc, #500]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	4a7c      	ldr	r2, [pc, #496]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003720:	6413      	str	r3, [r2, #64]	@ 0x40
 8003722:	4b7a      	ldr	r3, [pc, #488]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	4b77      	ldr	r3, [pc, #476]	@ (8003910 <HAL_RCC_OscConfig+0x474>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373e:	4b74      	ldr	r3, [pc, #464]	@ (8003910 <HAL_RCC_OscConfig+0x474>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a73      	ldr	r2, [pc, #460]	@ (8003910 <HAL_RCC_OscConfig+0x474>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374a:	f7fd fdc1 	bl	80012d0 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7fd fdbd 	bl	80012d0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e10c      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	4b6a      	ldr	r3, [pc, #424]	@ (8003910 <HAL_RCC_OscConfig+0x474>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x2ea>
 8003778:	4b64      	ldr	r3, [pc, #400]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377c:	4a63      	ldr	r2, [pc, #396]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6713      	str	r3, [r2, #112]	@ 0x70
 8003784:	e01c      	b.n	80037c0 <HAL_RCC_OscConfig+0x324>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b05      	cmp	r3, #5
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x30c>
 800378e:	4b5f      	ldr	r3, [pc, #380]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003792:	4a5e      	ldr	r2, [pc, #376]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 8003794:	f043 0304 	orr.w	r3, r3, #4
 8003798:	6713      	str	r3, [r2, #112]	@ 0x70
 800379a:	4b5c      	ldr	r3, [pc, #368]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	4a5b      	ldr	r2, [pc, #364]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0x324>
 80037a8:	4b58      	ldr	r3, [pc, #352]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	4a57      	ldr	r2, [pc, #348]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b4:	4b55      	ldr	r3, [pc, #340]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b8:	4a54      	ldr	r2, [pc, #336]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80037ba:	f023 0304 	bic.w	r3, r3, #4
 80037be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fd fd82 	bl	80012d0 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fd fd7e 	bl	80012d0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0cb      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	4b49      	ldr	r3, [pc, #292]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0ee      	beq.n	80037d0 <HAL_RCC_OscConfig+0x334>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f4:	f7fd fd6c 	bl	80012d0 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fc:	f7fd fd68 	bl	80012d0 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0b5      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003812:	4b3e      	ldr	r3, [pc, #248]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ee      	bne.n	80037fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d105      	bne.n	8003830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003824:	4b39      	ldr	r3, [pc, #228]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	4a38      	ldr	r2, [pc, #224]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a1 	beq.w	800397c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800383a:	4b34      	ldr	r3, [pc, #208]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b08      	cmp	r3, #8
 8003844:	d05c      	beq.n	8003900 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d141      	bne.n	80038d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384e:	4b31      	ldr	r3, [pc, #196]	@ (8003914 <HAL_RCC_OscConfig+0x478>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fd fd3c 	bl	80012d0 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7fd fd38 	bl	80012d0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e087      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386e:	4b27      	ldr	r3, [pc, #156]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	019b      	lsls	r3, r3, #6
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	3b01      	subs	r3, #1
 8003894:	041b      	lsls	r3, r3, #16
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	491b      	ldr	r1, [pc, #108]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003914 <HAL_RCC_OscConfig+0x478>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fd fd11 	bl	80012d0 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fd fd0d 	bl	80012d0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e05c      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c4:	4b11      	ldr	r3, [pc, #68]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x416>
 80038d0:	e054      	b.n	800397c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d2:	4b10      	ldr	r3, [pc, #64]	@ (8003914 <HAL_RCC_OscConfig+0x478>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fd fcfa 	bl	80012d0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fd fcf6 	bl	80012d0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e045      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <HAL_RCC_OscConfig+0x470>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x444>
 80038fe:	e03d      	b.n	800397c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d107      	bne.n	8003918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e038      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000
 8003914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003918:	4b1b      	ldr	r3, [pc, #108]	@ (8003988 <HAL_RCC_OscConfig+0x4ec>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d028      	beq.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d121      	bne.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d11a      	bne.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800394e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003950:	4293      	cmp	r3, r2
 8003952:	d111      	bne.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	3b01      	subs	r3, #1
 8003962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d107      	bne.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800

0800398c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0cc      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b68      	ldr	r3, [pc, #416]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d90c      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b65      	ldr	r3, [pc, #404]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b63      	ldr	r3, [pc, #396]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0b8      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e0:	4b59      	ldr	r3, [pc, #356]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a58      	ldr	r2, [pc, #352]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f8:	4b53      	ldr	r3, [pc, #332]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a52      	ldr	r2, [pc, #328]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b50      	ldr	r3, [pc, #320]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	494d      	ldr	r1, [pc, #308]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d044      	beq.n	8003aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b47      	ldr	r3, [pc, #284]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d119      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e067      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4934      	ldr	r1, [pc, #208]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fc28 	bl	80012d0 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fd fc24 	bl	80012d0 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e04f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d20c      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b22      	ldr	r3, [pc, #136]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4916      	ldr	r1, [pc, #88]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	490e      	ldr	r1, [pc, #56]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b12:	f000 f821 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	490a      	ldr	r1, [pc, #40]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	4a09      	ldr	r2, [pc, #36]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b2e:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fd fb88 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	0800599c 	.word	0x0800599c
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b5c:	b090      	sub	sp, #64	@ 0x40
 8003b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b70:	4b59      	ldr	r3, [pc, #356]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d00d      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x40>
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	f200 80a1 	bhi.w	8003cc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x34>
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b8a:	e09b      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b53      	ldr	r3, [pc, #332]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b90:	e09b      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b92:	4b53      	ldr	r3, [pc, #332]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b96:	e098      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b98:	4b4f      	ldr	r3, [pc, #316]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d028      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	623b      	str	r3, [r7, #32]
 8003bb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc4:	fb03 f201 	mul.w	r2, r3, r1
 8003bc8:	2300      	movs	r3, #0
 8003bca:	fb00 f303 	mul.w	r3, r0, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	4a43      	ldr	r2, [pc, #268]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8003bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bd8:	460a      	mov	r2, r1
 8003bda:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bde:	4413      	add	r3, r2
 8003be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	2200      	movs	r2, #0
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	61fa      	str	r2, [r7, #28]
 8003bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003bf2:	f7fc fb45 	bl	8000280 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfe:	e053      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c00:	4b35      	ldr	r3, [pc, #212]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	2200      	movs	r2, #0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	617a      	str	r2, [r7, #20]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c12:	f04f 0b00 	mov.w	fp, #0
 8003c16:	4652      	mov	r2, sl
 8003c18:	465b      	mov	r3, fp
 8003c1a:	f04f 0000 	mov.w	r0, #0
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	0159      	lsls	r1, r3, #5
 8003c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c28:	0150      	lsls	r0, r2, #5
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c32:	eb63 090b 	sbc.w	r9, r3, fp
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c4a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c4e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	00eb      	lsls	r3, r5, #3
 8003c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c60:	00e2      	lsls	r2, r4, #3
 8003c62:	4614      	mov	r4, r2
 8003c64:	461d      	mov	r5, r3
 8003c66:	eb14 030a 	adds.w	r3, r4, sl
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	eb45 030b 	adc.w	r3, r5, fp
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	028b      	lsls	r3, r1, #10
 8003c82:	4621      	mov	r1, r4
 8003c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c88:	4621      	mov	r1, r4
 8003c8a:	028a      	lsls	r2, r1, #10
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c92:	2200      	movs	r2, #0
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	60fa      	str	r2, [r7, #12]
 8003c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c9c:	f7fc faf0 	bl	8000280 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003cb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc2:	e002      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8003cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3740      	adds	r7, #64	@ 0x40
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	00f42400 	.word	0x00f42400
 8003ce0:	017d7840 	.word	0x017d7840

08003ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	@ (8003cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000000 	.word	0x20000000

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d00:	f7ff fff0 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0a9b      	lsrs	r3, r3, #10
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	080059ac 	.word	0x080059ac

08003d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d28:	f7ff ffdc 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	@ (8003d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0b5b      	lsrs	r3, r3, #13
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4903      	ldr	r1, [pc, #12]	@ (8003d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40023800 	.word	0x40023800
 8003d48:	080059ac 	.word	0x080059ac

08003d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e042      	b.n	8003de4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd f9cc 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	@ 0x24
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fcef 	bl	8004774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d112      	bne.n	8003e2c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_UART_Receive_IT+0x26>
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00b      	b.n	8003e2e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fad2 	bl	80043cc <UART_Start_Receive_IT>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	e000      	b.n	8003e2e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_UART_IRQHandler+0x66>
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fbae 	bl	80045f8 <UART_Receive_IT>
      return;
 8003e9c:	e273      	b.n	8004386 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80de 	beq.w	8004064 <HAL_UART_IRQHandler+0x22c>
 8003ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80d1 	beq.w	8004064 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xae>
 8003ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_UART_IRQHandler+0xd2>
 8003ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xf6>
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f043 0204 	orr.w	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <HAL_UART_IRQHandler+0x126>
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 820a 	beq.w	800437c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_UART_IRQHandler+0x14e>
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fb39 	bl	80045f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b40      	cmp	r3, #64	@ 0x40
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x17a>
 8003faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d04f      	beq.n	8004052 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa44 	bl	8004440 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc2:	2b40      	cmp	r3, #64	@ 0x40
 8003fc4:	d141      	bne.n	800404a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800400a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1d9      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d013      	beq.n	8004042 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	4a8a      	ldr	r2, [pc, #552]	@ (8004248 <HAL_UART_IRQHandler+0x410>)
 8004020:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fb03 	bl	8001632 <HAL_DMA_Abort_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800403c:	4610      	mov	r0, r2
 800403e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004040:	e00e      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9ac 	bl	80043a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	e00a      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9a8 	bl	80043a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e006      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9a4 	bl	80043a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800405e:	e18d      	b.n	800437c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	bf00      	nop
    return;
 8004062:	e18b      	b.n	800437c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004068:	2b01      	cmp	r3, #1
 800406a:	f040 8167 	bne.w	800433c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8160 	beq.w	800433c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8159 	beq.w	800433c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b40      	cmp	r3, #64	@ 0x40
 80040ac:	f040 80ce 	bne.w	800424c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a9 	beq.w	8004218 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040ce:	429a      	cmp	r2, r3
 80040d0:	f080 80a2 	bcs.w	8004218 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e6:	f000 8088 	beq.w	80041fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800411a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004122:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800412e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1d9      	bne.n	80040ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3314      	adds	r3, #20
 8004156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800415a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800415e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004162:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800416c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e1      	bne.n	8004136 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004196:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004198:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800419c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e3      	bne.n	8004172 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ca:	f023 0310 	bic.w	r3, r3, #16
 80041ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e3      	bne.n	80041b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fd f9ac 	bl	8001552 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2202      	movs	r2, #2
 80041fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	b29b      	uxth	r3, r3
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f8cf 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004216:	e0b3      	b.n	8004380 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800421c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004220:	429a      	cmp	r2, r3
 8004222:	f040 80ad 	bne.w	8004380 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004230:	f040 80a6 	bne.w	8004380 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8b7 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
      return;
 8004246:	e09b      	b.n	8004380 <HAL_UART_IRQHandler+0x548>
 8004248:	08004507 	.word	0x08004507
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004254:	b29b      	uxth	r3, r3
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 808e 	beq.w	8004384 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8089 	beq.w	8004384 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	330c      	adds	r3, #12
 8004292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004296:	647a      	str	r2, [r7, #68]	@ 0x44
 8004298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800429c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e3      	bne.n	8004272 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	623b      	str	r3, [r7, #32]
   return(result);
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e3      	bne.n	80042aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0310 	bic.w	r3, r3, #16
 8004306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004314:	61fa      	str	r2, [r7, #28]
 8004316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	617b      	str	r3, [r7, #20]
   return(result);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e3      	bne.n	80042f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800432e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f83d 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800433a:	e023      	b.n	8004384 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d009      	beq.n	800435c <HAL_UART_IRQHandler+0x524>
 8004348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8e7 	bl	8004528 <UART_Transmit_IT>
    return;
 800435a:	e014      	b.n	8004386 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800435c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00e      	beq.n	8004386 <HAL_UART_IRQHandler+0x54e>
 8004368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f927 	bl	80045c8 <UART_EndTransmit_IT>
    return;
 800437a:	e004      	b.n	8004386 <HAL_UART_IRQHandler+0x54e>
    return;
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <HAL_UART_IRQHandler+0x54e>
      return;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <HAL_UART_IRQHandler+0x54e>
      return;
 8004384:	bf00      	nop
  }
}
 8004386:	37e8      	adds	r7, #232	@ 0xe8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2222      	movs	r2, #34	@ 0x22
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004410:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0220 	orr.w	r2, r2, #32
 8004430:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004440:	b480      	push	{r7}
 8004442:	b095      	sub	sp, #84	@ 0x54
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004468:	643a      	str	r2, [r7, #64]	@ 0x40
 800446a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800446e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	61fb      	str	r3, [r7, #28]
   return(result);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800449c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800449e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d119      	bne.n	80044ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0310 	bic.w	r3, r3, #16
 80044ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044d8:	61ba      	str	r2, [r7, #24]
 80044da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	613b      	str	r3, [r7, #16]
   return(result);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044fa:	bf00      	nop
 80044fc:	3754      	adds	r7, #84	@ 0x54
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff ff40 	bl	80043a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b21      	cmp	r3, #33	@ 0x21
 800453a:	d13e      	bne.n	80045ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004544:	d114      	bne.n	8004570 <UART_Transmit_IT+0x48>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d110      	bne.n	8004570 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004562:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]
 800456e:	e008      	b.n	8004582 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	1c59      	adds	r1, r3, #1
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6211      	str	r1, [r2, #32]
 800457a:	781a      	ldrb	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29b      	uxth	r3, r3
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4619      	mov	r1, r3
 8004590:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e000      	b.n	80045bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fecf 	bl	800438c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	@ 0x30
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b22      	cmp	r3, #34	@ 0x22
 8004612:	f040 80aa 	bne.w	800476a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461e:	d115      	bne.n	800464c <UART_Receive_IT+0x54>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d111      	bne.n	800464c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	b29a      	uxth	r2, r3
 800463c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004644:	1c9a      	adds	r2, r3, #2
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	629a      	str	r2, [r3, #40]	@ 0x28
 800464a:	e024      	b.n	8004696 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465a:	d007      	beq.n	800466c <UART_Receive_IT+0x74>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <UART_Receive_IT+0x82>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e008      	b.n	800468c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004686:	b2da      	uxtb	r2, r3
 8004688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	4619      	mov	r1, r3
 80046a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d15d      	bne.n	8004766 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0220 	bic.w	r2, r2, #32
 80046b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695a      	ldr	r2, [r3, #20]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d135      	bne.n	800475c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	613b      	str	r3, [r7, #16]
   return(result);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f023 0310 	bic.w	r3, r3, #16
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004716:	623a      	str	r2, [r7, #32]
 8004718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	69f9      	ldr	r1, [r7, #28]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	61bb      	str	r3, [r7, #24]
   return(result);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e5      	bne.n	80046f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b10      	cmp	r3, #16
 8004736:	d10a      	bne.n	800474e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fe2d 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
 800475a:	e002      	b.n	8004762 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fc fb67 	bl	8000e30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e002      	b.n	800476c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
  }
}
 800476c:	4618      	mov	r0, r3
 800476e:	3730      	adds	r7, #48	@ 0x30
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004778:	b0c0      	sub	sp, #256	@ 0x100
 800477a:	af00      	add	r7, sp, #0
 800477c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	68d9      	ldr	r1, [r3, #12]
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	ea40 0301 	orr.w	r3, r0, r1
 800479c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047cc:	f021 010c 	bic.w	r1, r1, #12
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047da:	430b      	orrs	r3, r1
 80047dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ee:	6999      	ldr	r1, [r3, #24]
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	ea40 0301 	orr.w	r3, r0, r1
 80047fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b8f      	ldr	r3, [pc, #572]	@ (8004a40 <UART_SetConfig+0x2cc>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d005      	beq.n	8004814 <UART_SetConfig+0xa0>
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a44 <UART_SetConfig+0x2d0>)
 8004810:	429a      	cmp	r2, r3
 8004812:	d104      	bne.n	800481e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004814:	f7ff fa86 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8004818:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800481c:	e003      	b.n	8004826 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800481e:	f7ff fa6d 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8004822:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004830:	f040 810c 	bne.w	8004a4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800483e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004842:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004846:	4622      	mov	r2, r4
 8004848:	462b      	mov	r3, r5
 800484a:	1891      	adds	r1, r2, r2
 800484c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800484e:	415b      	adcs	r3, r3
 8004850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004852:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004856:	4621      	mov	r1, r4
 8004858:	eb12 0801 	adds.w	r8, r2, r1
 800485c:	4629      	mov	r1, r5
 800485e:	eb43 0901 	adc.w	r9, r3, r1
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004876:	4690      	mov	r8, r2
 8004878:	4699      	mov	r9, r3
 800487a:	4623      	mov	r3, r4
 800487c:	eb18 0303 	adds.w	r3, r8, r3
 8004880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004884:	462b      	mov	r3, r5
 8004886:	eb49 0303 	adc.w	r3, r9, r3
 800488a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800489a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800489e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048a2:	460b      	mov	r3, r1
 80048a4:	18db      	adds	r3, r3, r3
 80048a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a8:	4613      	mov	r3, r2
 80048aa:	eb42 0303 	adc.w	r3, r2, r3
 80048ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80048b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048b8:	f7fb fce2 	bl	8000280 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4b61      	ldr	r3, [pc, #388]	@ (8004a48 <UART_SetConfig+0x2d4>)
 80048c2:	fba3 2302 	umull	r2, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048e4:	415b      	adcs	r3, r3
 80048e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048ec:	4641      	mov	r1, r8
 80048ee:	eb12 0a01 	adds.w	sl, r2, r1
 80048f2:	4649      	mov	r1, r9
 80048f4:	eb43 0b01 	adc.w	fp, r3, r1
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004904:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490c:	4692      	mov	sl, r2
 800490e:	469b      	mov	fp, r3
 8004910:	4643      	mov	r3, r8
 8004912:	eb1a 0303 	adds.w	r3, sl, r3
 8004916:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800491a:	464b      	mov	r3, r9
 800491c:	eb4b 0303 	adc.w	r3, fp, r3
 8004920:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004930:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004934:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004938:	460b      	mov	r3, r1
 800493a:	18db      	adds	r3, r3, r3
 800493c:	643b      	str	r3, [r7, #64]	@ 0x40
 800493e:	4613      	mov	r3, r2
 8004940:	eb42 0303 	adc.w	r3, r2, r3
 8004944:	647b      	str	r3, [r7, #68]	@ 0x44
 8004946:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800494a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800494e:	f7fb fc97 	bl	8000280 <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4611      	mov	r1, r2
 8004958:	4b3b      	ldr	r3, [pc, #236]	@ (8004a48 <UART_SetConfig+0x2d4>)
 800495a:	fba3 2301 	umull	r2, r3, r3, r1
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2264      	movs	r2, #100	@ 0x64
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	1acb      	subs	r3, r1, r3
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800496e:	4b36      	ldr	r3, [pc, #216]	@ (8004a48 <UART_SetConfig+0x2d4>)
 8004970:	fba3 2302 	umull	r2, r3, r3, r2
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800497c:	441c      	add	r4, r3
 800497e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004988:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800498c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	1891      	adds	r1, r2, r2
 8004996:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004998:	415b      	adcs	r3, r3
 800499a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800499c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049a0:	4641      	mov	r1, r8
 80049a2:	1851      	adds	r1, r2, r1
 80049a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80049a6:	4649      	mov	r1, r9
 80049a8:	414b      	adcs	r3, r1
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049b8:	4659      	mov	r1, fp
 80049ba:	00cb      	lsls	r3, r1, #3
 80049bc:	4651      	mov	r1, sl
 80049be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c2:	4651      	mov	r1, sl
 80049c4:	00ca      	lsls	r2, r1, #3
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	4642      	mov	r2, r8
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049d4:	464b      	mov	r3, r9
 80049d6:	460a      	mov	r2, r1
 80049d8:	eb42 0303 	adc.w	r3, r2, r3
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049f4:	460b      	mov	r3, r1
 80049f6:	18db      	adds	r3, r3, r3
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049fa:	4613      	mov	r3, r2
 80049fc:	eb42 0303 	adc.w	r3, r2, r3
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a0a:	f7fb fc39 	bl	8000280 <__aeabi_uldivmod>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <UART_SetConfig+0x2d4>)
 8004a14:	fba3 1302 	umull	r1, r3, r3, r2
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	2164      	movs	r1, #100	@ 0x64
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	3332      	adds	r3, #50	@ 0x32
 8004a26:	4a08      	ldr	r2, [pc, #32]	@ (8004a48 <UART_SetConfig+0x2d4>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	f003 0207 	and.w	r2, r3, #7
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4422      	add	r2, r4
 8004a3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a3c:	e106      	b.n	8004c4c <UART_SetConfig+0x4d8>
 8004a3e:	bf00      	nop
 8004a40:	40011000 	.word	0x40011000
 8004a44:	40011400 	.word	0x40011400
 8004a48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a5e:	4642      	mov	r2, r8
 8004a60:	464b      	mov	r3, r9
 8004a62:	1891      	adds	r1, r2, r2
 8004a64:	6239      	str	r1, [r7, #32]
 8004a66:	415b      	adcs	r3, r3
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a6e:	4641      	mov	r1, r8
 8004a70:	1854      	adds	r4, r2, r1
 8004a72:	4649      	mov	r1, r9
 8004a74:	eb43 0501 	adc.w	r5, r3, r1
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	00eb      	lsls	r3, r5, #3
 8004a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a86:	00e2      	lsls	r2, r4, #3
 8004a88:	4614      	mov	r4, r2
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	4643      	mov	r3, r8
 8004a8e:	18e3      	adds	r3, r4, r3
 8004a90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a94:	464b      	mov	r3, r9
 8004a96:	eb45 0303 	adc.w	r3, r5, r3
 8004a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004aba:	4629      	mov	r1, r5
 8004abc:	008b      	lsls	r3, r1, #2
 8004abe:	4621      	mov	r1, r4
 8004ac0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	008a      	lsls	r2, r1, #2
 8004ac8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004acc:	f7fb fbd8 	bl	8000280 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4b60      	ldr	r3, [pc, #384]	@ (8004c58 <UART_SetConfig+0x4e4>)
 8004ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	011c      	lsls	r4, r3, #4
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ae8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004aec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004af0:	4642      	mov	r2, r8
 8004af2:	464b      	mov	r3, r9
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	61b9      	str	r1, [r7, #24]
 8004af8:	415b      	adcs	r3, r3
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b00:	4641      	mov	r1, r8
 8004b02:	1851      	adds	r1, r2, r1
 8004b04:	6139      	str	r1, [r7, #16]
 8004b06:	4649      	mov	r1, r9
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b18:	4659      	mov	r1, fp
 8004b1a:	00cb      	lsls	r3, r1, #3
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b22:	4651      	mov	r1, sl
 8004b24:	00ca      	lsls	r2, r1, #3
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b34:	464b      	mov	r3, r9
 8004b36:	460a      	mov	r2, r1
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b58:	4649      	mov	r1, r9
 8004b5a:	008b      	lsls	r3, r1, #2
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b62:	4641      	mov	r1, r8
 8004b64:	008a      	lsls	r2, r1, #2
 8004b66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b6a:	f7fb fb89 	bl	8000280 <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	4b38      	ldr	r3, [pc, #224]	@ (8004c58 <UART_SetConfig+0x4e4>)
 8004b76:	fba3 2301 	umull	r2, r3, r3, r1
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	2264      	movs	r2, #100	@ 0x64
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	1acb      	subs	r3, r1, r3
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	3332      	adds	r3, #50	@ 0x32
 8004b88:	4a33      	ldr	r2, [pc, #204]	@ (8004c58 <UART_SetConfig+0x4e4>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b94:	441c      	add	r4, r3
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ba0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	415b      	adcs	r3, r3
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	1851      	adds	r1, r2, r1
 8004bb8:	6039      	str	r1, [r7, #0]
 8004bba:	4649      	mov	r1, r9
 8004bbc:	414b      	adcs	r3, r1
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bcc:	4659      	mov	r1, fp
 8004bce:	00cb      	lsls	r3, r1, #3
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	00ca      	lsls	r2, r1, #3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	4642      	mov	r2, r8
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004be6:	464b      	mov	r3, r9
 8004be8:	460a      	mov	r2, r1
 8004bea:	eb42 0303 	adc.w	r3, r2, r3
 8004bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c08:	4649      	mov	r1, r9
 8004c0a:	008b      	lsls	r3, r1, #2
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c12:	4641      	mov	r1, r8
 8004c14:	008a      	lsls	r2, r1, #2
 8004c16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c1a:	f7fb fb31 	bl	8000280 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4b0d      	ldr	r3, [pc, #52]	@ (8004c58 <UART_SetConfig+0x4e4>)
 8004c24:	fba3 1302 	umull	r1, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	2164      	movs	r1, #100	@ 0x64
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	3332      	adds	r3, #50	@ 0x32
 8004c36:	4a08      	ldr	r2, [pc, #32]	@ (8004c58 <UART_SetConfig+0x4e4>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4422      	add	r2, r4
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c52:	46bd      	mov	sp, r7
 8004c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <lcd_4bit_intialize>:
		                                 uint8_t row, uint8_t coulmn);

static StdReturnType lcd_8bit_send_enable_signal(const chr_lcd_8bit_type *lcd);
static StdReturnType lcd_8bit_set_cursor(const chr_lcd_8bit_type *lcd,
		                                 uint8_t row, uint8_t coulmn);
StdReturnType lcd_4bit_intialize(const chr_lcd_4bit_type *lcd){
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	StdReturnType ret = E_OK;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
	    if(NULL == lcd){
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <lcd_4bit_intialize+0x18>
	        ret = E_NOT_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
 8004c72:	e03e      	b.n	8004cf2 <lcd_4bit_intialize+0x96>
	    }
	    else{

	        HAL_Delay(20);
 8004c74:	2014      	movs	r0, #20
 8004c76:	f7fc fb37 	bl	80012e8 <HAL_Delay>
	        ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 8004c7a:	2138      	movs	r1, #56	@ 0x38
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f83d 	bl	8004cfc <lcd_4bit_send_command>
 8004c82:	4603      	mov	r3, r0
 8004c84:	73fb      	strb	r3, [r7, #15]
	        HAL_Delay(5);
 8004c86:	2005      	movs	r0, #5
 8004c88:	f7fc fb2e 	bl	80012e8 <HAL_Delay>
	        ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 8004c8c:	2138      	movs	r1, #56	@ 0x38
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f834 	bl	8004cfc <lcd_4bit_send_command>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
	        HAL_Delay(1);
 8004c98:	2001      	movs	r0, #1
 8004c9a:	f7fc fb25 	bl	80012e8 <HAL_Delay>
	        ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 8004c9e:	2138      	movs	r1, #56	@ 0x38
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f82b 	bl	8004cfc <lcd_4bit_send_command>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	73fb      	strb	r3, [r7, #15]

	        ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
 8004caa:	2101      	movs	r1, #1
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f825 	bl	8004cfc <lcd_4bit_send_command>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73fb      	strb	r3, [r7, #15]
	        ret = lcd_4bit_send_command(lcd, _LCD_RETURN_HOME);
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f81f 	bl	8004cfc <lcd_4bit_send_command>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	73fb      	strb	r3, [r7, #15]
	        ret = lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 8004cc2:	2106      	movs	r1, #6
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f819 	bl	8004cfc <lcd_4bit_send_command>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	73fb      	strb	r3, [r7, #15]
	        ret = lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 8004cce:	210c      	movs	r1, #12
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f813 	bl	8004cfc <lcd_4bit_send_command>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	73fb      	strb	r3, [r7, #15]
	        ret = lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 8004cda:	2128      	movs	r1, #40	@ 0x28
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f80d 	bl	8004cfc <lcd_4bit_send_command>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	73fb      	strb	r3, [r7, #15]
	        ret = lcd_4bit_send_command(lcd, 0x80);
 8004ce6:	2180      	movs	r1, #128	@ 0x80
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f807 	bl	8004cfc <lcd_4bit_send_command>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73fb      	strb	r3, [r7, #15]
	    }
	    return ret;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <lcd_4bit_send_command>:
StdReturnType lcd_4bit_send_command(const chr_lcd_4bit_type *lcd, uint8_t command){
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
	StdReturnType ret = E_OK;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
	    if(NULL == lcd){
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <lcd_4bit_send_command+0x1c>
	        ret = E_NOT_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
 8004d16:	e021      	b.n	8004d5c <lcd_4bit_send_command+0x60>
	    }
	    else{
	        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
	        /* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
	    	HAL_GPIO_WritePin(lcd->lcd_rs_port,lcd->lcd_rs_pin, GPIO_PIN_RESET);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	889b      	ldrh	r3, [r3, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	4619      	mov	r1, r3
 8004d24:	f7fc fe52 	bl	80019cc <HAL_GPIO_WritePin>
	        /* Send the Command through the (4-Pins" Data lines */
	        ret = lcd_send_4bits(lcd, command >> 4);
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f87a 	bl	8004e2a <lcd_send_4bits>
 8004d36:	4603      	mov	r3, r0
 8004d38:	73fb      	strb	r3, [r7, #15]
	        /* Send the Enable Signal on the "E" Pin */
	        ret = lcd_4bit_send_enable_signal(lcd);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8b4 	bl	8004ea8 <lcd_4bit_send_enable_signal>
 8004d40:	4603      	mov	r3, r0
 8004d42:	73fb      	strb	r3, [r7, #15]
	        /* Send the Command through the (4-Pins" Data lines */
	        ret = lcd_send_4bits(lcd, command);
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f86e 	bl	8004e2a <lcd_send_4bits>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	73fb      	strb	r3, [r7, #15]
	        /* Send the Enable Signal on the "E" Pin */
	        ret = lcd_4bit_send_enable_signal(lcd);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8a8 	bl	8004ea8 <lcd_4bit_send_enable_signal>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]
	    }
	    return ret;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <lcd_4bit_send_char_data>:
StdReturnType lcd_4bit_send_char_data(const chr_lcd_4bit_type *lcd, uint8_t data){
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
	StdReturnType ret = E_OK;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
	    if(NULL == lcd){
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <lcd_4bit_send_char_data+0x1c>
	        ret = E_NOT_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	e021      	b.n	8004dc6 <lcd_4bit_send_char_data+0x60>
	    }
	    else{
	        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
	        /* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
	    	HAL_GPIO_WritePin(lcd->lcd_rs_port,lcd->lcd_rs_pin, GPIO_PIN_SET);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	889b      	ldrh	r3, [r3, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f7fc fe1d 	bl	80019cc <HAL_GPIO_WritePin>
	        /* Send the Data through the (4-Pins" Data lines */
	        ret = lcd_send_4bits(lcd, data >> 4);
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f845 	bl	8004e2a <lcd_send_4bits>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]
	        /* Send the Enable Signal on the "E" Pin */
	        ret = lcd_4bit_send_enable_signal(lcd);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f87f 	bl	8004ea8 <lcd_4bit_send_enable_signal>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
	        /* Send the Data through the (4-Pins" Data lines */
	        ret = lcd_send_4bits(lcd, data);
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f839 	bl	8004e2a <lcd_send_4bits>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
	        /* Send the Enable Signal on the "E" Pin */
	        ret = lcd_4bit_send_enable_signal(lcd);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f873 	bl	8004ea8 <lcd_4bit_send_enable_signal>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	73fb      	strb	r3, [r7, #15]
	    }
	    return ret;
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <lcd_4bit_send_string_pos>:
	        }
	    }
	    return ret;
}
StdReturnType lcd_4bit_send_string_pos(const chr_lcd_4bit_type *lcd, uint8_t row,
		                               uint8_t column, uint8_t *str){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	72fb      	strb	r3, [r7, #11]
 8004dde:	4613      	mov	r3, r2
 8004de0:	72bb      	strb	r3, [r7, #10]
	StdReturnType ret = E_OK;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
	    if(NULL == lcd){
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <lcd_4bit_send_string_pos+0x22>
	        ret = E_NOT_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	75fb      	strb	r3, [r7, #23]
 8004df0:	e016      	b.n	8004e20 <lcd_4bit_send_string_pos+0x50>
	    }
	    else{
	        ret = lcd_4bit_set_cursor(lcd, row, column);
 8004df2:	7aba      	ldrb	r2, [r7, #10]
 8004df4:	7afb      	ldrb	r3, [r7, #11]
 8004df6:	4619      	mov	r1, r3
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f873 	bl	8004ee4 <lcd_4bit_set_cursor>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	75fb      	strb	r3, [r7, #23]
	        while(*str){
 8004e02:	e009      	b.n	8004e18 <lcd_4bit_send_string_pos+0x48>
	            ret = lcd_4bit_send_char_data(lcd, *str++);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff ffa9 	bl	8004d66 <lcd_4bit_send_char_data>
 8004e14:	4603      	mov	r3, r0
 8004e16:	75fb      	strb	r3, [r7, #23]
	        while(*str){
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f1      	bne.n	8004e04 <lcd_4bit_send_string_pos+0x34>
	        }
	    }
	    return ret;
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <lcd_send_4bits>:
 * @param _data_command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static StdReturnType lcd_send_4bits(const chr_lcd_4bit_type *lcd, uint8_t _data_command){
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70fb      	strb	r3, [r7, #3]

	StdReturnType ret = E_OK;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(lcd->lcd_data_port[0], lcd->lcd_data_pin[0],
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6918      	ldr	r0, [r3, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8c19      	ldrh	r1, [r3, #32]
    		(_data_command >> 0) & (uint8_t)0x01);
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
    HAL_GPIO_WritePin(lcd->lcd_data_port[0], lcd->lcd_data_pin[0],
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f7fc fdbe 	bl	80019cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd->lcd_data_port[1], lcd->lcd_data_pin[1],
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6958      	ldr	r0, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
    		(_data_command >> 1) & (uint8_t)0x01);
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	b2db      	uxtb	r3, r3
    HAL_GPIO_WritePin(lcd->lcd_data_port[1], lcd->lcd_data_pin[1],
 8004e64:	461a      	mov	r2, r3
 8004e66:	f7fc fdb1 	bl	80019cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd->lcd_data_port[2], lcd->lcd_data_pin[2],
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6998      	ldr	r0, [r3, #24]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 8004e72:	78fb      	ldrb	r3, [r7, #3]
 8004e74:	089b      	lsrs	r3, r3, #2
 8004e76:	b2db      	uxtb	r3, r3
    		(_data_command >> 2) & (uint8_t)0x01);
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
    HAL_GPIO_WritePin(lcd->lcd_data_port[2], lcd->lcd_data_pin[2],
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f7fc fda4 	bl	80019cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd->lcd_data_port[3], lcd->lcd_data_pin[3],
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69d8      	ldr	r0, [r3, #28]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8cd9      	ldrh	r1, [r3, #38]	@ 0x26
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	b2db      	uxtb	r3, r3
    		(_data_command >> 3) & (uint8_t)0x01);
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	b2db      	uxtb	r3, r3
    HAL_GPIO_WritePin(lcd->lcd_data_port[3], lcd->lcd_data_pin[3],
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f7fc fd97 	bl	80019cc <HAL_GPIO_WritePin>
    return ret;
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <lcd_4bit_send_enable_signal>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static StdReturnType lcd_4bit_send_enable_signal(const chr_lcd_4bit_type *lcd){
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	StdReturnType ret = E_OK;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(lcd->lcd_en_port,lcd->lcd_en_pin, GPIO_PIN_SET);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6898      	ldr	r0, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	899b      	ldrh	r3, [r3, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7fc fd84 	bl	80019cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8004ec4:	200a      	movs	r0, #10
 8004ec6:	f7fc fa0f 	bl	80012e8 <HAL_Delay>
    HAL_GPIO_WritePin(lcd->lcd_en_port,lcd->lcd_en_pin,GPIO_PIN_RESET);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6898      	ldr	r0, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	899b      	ldrh	r3, [r3, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f7fc fd79 	bl	80019cc <HAL_GPIO_WritePin>
    return ret;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <lcd_4bit_set_cursor>:
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static StdReturnType lcd_4bit_set_cursor(const chr_lcd_4bit_type *lcd,
		                                 uint8_t row, uint8_t coulmn){
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	70bb      	strb	r3, [r7, #2]
	StdReturnType ret = E_OK;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
    coulmn--;
 8004ef8:	78bb      	ldrb	r3, [r7, #2]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	70bb      	strb	r3, [r7, #2]
    switch(row){
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d832      	bhi.n	8004f6c <lcd_4bit_set_cursor+0x88>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <lcd_4bit_set_cursor+0x28>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f31 	.word	0x08004f31
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f59 	.word	0x08004f59
        case ROW1 : ret = lcd_4bit_send_command(lcd, (0x80 + coulmn)); break;
 8004f1c:	78bb      	ldrb	r3, [r7, #2]
 8004f1e:	3b80      	subs	r3, #128	@ 0x80
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fee9 	bl	8004cfc <lcd_4bit_send_command>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]
 8004f2e:	e01d      	b.n	8004f6c <lcd_4bit_set_cursor+0x88>
        case ROW2 : ret = lcd_4bit_send_command(lcd, (0xc0 + coulmn)); break;
 8004f30:	78bb      	ldrb	r3, [r7, #2]
 8004f32:	3b40      	subs	r3, #64	@ 0x40
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fedf 	bl	8004cfc <lcd_4bit_send_command>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
 8004f42:	e013      	b.n	8004f6c <lcd_4bit_set_cursor+0x88>
        case ROW3 : ret = lcd_4bit_send_command(lcd, (0x94 + coulmn)); break;
 8004f44:	78bb      	ldrb	r3, [r7, #2]
 8004f46:	3b6c      	subs	r3, #108	@ 0x6c
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff fed5 	bl	8004cfc <lcd_4bit_send_command>
 8004f52:	4603      	mov	r3, r0
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e009      	b.n	8004f6c <lcd_4bit_set_cursor+0x88>
        case ROW4 : ret = lcd_4bit_send_command(lcd, (0xd4 + coulmn)); break;
 8004f58:	78bb      	ldrb	r3, [r7, #2]
 8004f5a:	3b2c      	subs	r3, #44	@ 0x2c
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fecb 	bl	8004cfc <lcd_4bit_send_command>
 8004f66:	4603      	mov	r3, r0
 8004f68:	73fb      	strb	r3, [r7, #15]
 8004f6a:	bf00      	nop
        default : ;
    }
    return ret;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop

08004f78 <convert_uint8_to_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
StdReturnType convert_uint8_to_string(uint8_t value, char *str) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
	StdReturnType ret = E_OK;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
    if (str == NULL) {
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <convert_uint8_to_string+0x1c>
        ret = E_NOT_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
 8004f92:	e005      	b.n	8004fa0 <convert_uint8_to_string+0x28>
    } else {
        // Ensure the string buffer is large enough
        snprintf(str, 4, "%u", value); // 4 bytes: 3 for digits + 1 for null-terminator
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	4a05      	ldr	r2, [pc, #20]	@ (8004fac <convert_uint8_to_string+0x34>)
 8004f98:	2104      	movs	r1, #4
 8004f9a:	6838      	ldr	r0, [r7, #0]
 8004f9c:	f000 f824 	bl	8004fe8 <sniprintf>
    }
    return ret;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	08005998 	.word	0x08005998

08004fb0 <convert_uint16_to_string>:
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */

StdReturnType convert_uint16_to_string(uint16_t value, char *str) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	80fb      	strh	r3, [r7, #6]
	StdReturnType ret = E_OK;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
    if (str == NULL) {
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <convert_uint16_to_string+0x1c>
        ret = E_NOT_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
 8004fca:	e005      	b.n	8004fd8 <convert_uint16_to_string+0x28>
    } else {
        // Format the string directly into the provided buffer
        snprintf(str, 6, "%u", value); // 6 bytes: 5 for digits + 1 for null-terminator
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	4a05      	ldr	r2, [pc, #20]	@ (8004fe4 <convert_uint16_to_string+0x34>)
 8004fd0:	2106      	movs	r1, #6
 8004fd2:	6838      	ldr	r0, [r7, #0]
 8004fd4:	f000 f808 	bl	8004fe8 <sniprintf>
    }
    return ret;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	08005998 	.word	0x08005998

08004fe8 <sniprintf>:
 8004fe8:	b40c      	push	{r2, r3}
 8004fea:	b530      	push	{r4, r5, lr}
 8004fec:	4b18      	ldr	r3, [pc, #96]	@ (8005050 <sniprintf+0x68>)
 8004fee:	1e0c      	subs	r4, r1, #0
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	b09d      	sub	sp, #116	@ 0x74
 8004ff4:	da08      	bge.n	8005008 <sniprintf+0x20>
 8004ff6:	238b      	movs	r3, #139	@ 0x8b
 8004ff8:	602b      	str	r3, [r5, #0]
 8004ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffe:	b01d      	add	sp, #116	@ 0x74
 8005000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005004:	b002      	add	sp, #8
 8005006:	4770      	bx	lr
 8005008:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800500c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005016:	bf14      	ite	ne
 8005018:	f104 33ff 	addne.w	r3, r4, #4294967295
 800501c:	4623      	moveq	r3, r4
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005026:	9002      	str	r0, [sp, #8]
 8005028:	9006      	str	r0, [sp, #24]
 800502a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800502e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005030:	ab21      	add	r3, sp, #132	@ 0x84
 8005032:	a902      	add	r1, sp, #8
 8005034:	4628      	mov	r0, r5
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	f000 f994 	bl	8005364 <_svfiprintf_r>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	bfbc      	itt	lt
 8005040:	238b      	movlt	r3, #139	@ 0x8b
 8005042:	602b      	strlt	r3, [r5, #0]
 8005044:	2c00      	cmp	r4, #0
 8005046:	d0da      	beq.n	8004ffe <sniprintf+0x16>
 8005048:	9b02      	ldr	r3, [sp, #8]
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e7d6      	b.n	8004ffe <sniprintf+0x16>
 8005050:	20000034 	.word	0x20000034

08005054 <memset>:
 8005054:	4402      	add	r2, r0
 8005056:	4603      	mov	r3, r0
 8005058:	4293      	cmp	r3, r2
 800505a:	d100      	bne.n	800505e <memset+0xa>
 800505c:	4770      	bx	lr
 800505e:	f803 1b01 	strb.w	r1, [r3], #1
 8005062:	e7f9      	b.n	8005058 <memset+0x4>

08005064 <__errno>:
 8005064:	4b01      	ldr	r3, [pc, #4]	@ (800506c <__errno+0x8>)
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000034 	.word	0x20000034

08005070 <__libc_init_array>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4d0d      	ldr	r5, [pc, #52]	@ (80050a8 <__libc_init_array+0x38>)
 8005074:	4c0d      	ldr	r4, [pc, #52]	@ (80050ac <__libc_init_array+0x3c>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	2600      	movs	r6, #0
 800507c:	42a6      	cmp	r6, r4
 800507e:	d109      	bne.n	8005094 <__libc_init_array+0x24>
 8005080:	4d0b      	ldr	r5, [pc, #44]	@ (80050b0 <__libc_init_array+0x40>)
 8005082:	4c0c      	ldr	r4, [pc, #48]	@ (80050b4 <__libc_init_array+0x44>)
 8005084:	f000 fc64 	bl	8005950 <_init>
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	2600      	movs	r6, #0
 800508e:	42a6      	cmp	r6, r4
 8005090:	d105      	bne.n	800509e <__libc_init_array+0x2e>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	f855 3b04 	ldr.w	r3, [r5], #4
 8005098:	4798      	blx	r3
 800509a:	3601      	adds	r6, #1
 800509c:	e7ee      	b.n	800507c <__libc_init_array+0xc>
 800509e:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a2:	4798      	blx	r3
 80050a4:	3601      	adds	r6, #1
 80050a6:	e7f2      	b.n	800508e <__libc_init_array+0x1e>
 80050a8:	080059f0 	.word	0x080059f0
 80050ac:	080059f0 	.word	0x080059f0
 80050b0:	080059f0 	.word	0x080059f0
 80050b4:	080059f4 	.word	0x080059f4

080050b8 <__retarget_lock_acquire_recursive>:
 80050b8:	4770      	bx	lr

080050ba <__retarget_lock_release_recursive>:
 80050ba:	4770      	bx	lr

080050bc <_free_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4605      	mov	r5, r0
 80050c0:	2900      	cmp	r1, #0
 80050c2:	d041      	beq.n	8005148 <_free_r+0x8c>
 80050c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c8:	1f0c      	subs	r4, r1, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bfb8      	it	lt
 80050ce:	18e4      	addlt	r4, r4, r3
 80050d0:	f000 f8e0 	bl	8005294 <__malloc_lock>
 80050d4:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <_free_r+0x90>)
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	b933      	cbnz	r3, 80050e8 <_free_r+0x2c>
 80050da:	6063      	str	r3, [r4, #4]
 80050dc:	6014      	str	r4, [r2, #0]
 80050de:	4628      	mov	r0, r5
 80050e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e4:	f000 b8dc 	b.w	80052a0 <__malloc_unlock>
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d908      	bls.n	80050fe <_free_r+0x42>
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	1821      	adds	r1, r4, r0
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf01      	itttt	eq
 80050f4:	6819      	ldreq	r1, [r3, #0]
 80050f6:	685b      	ldreq	r3, [r3, #4]
 80050f8:	1809      	addeq	r1, r1, r0
 80050fa:	6021      	streq	r1, [r4, #0]
 80050fc:	e7ed      	b.n	80050da <_free_r+0x1e>
 80050fe:	461a      	mov	r2, r3
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	b10b      	cbz	r3, 8005108 <_free_r+0x4c>
 8005104:	42a3      	cmp	r3, r4
 8005106:	d9fa      	bls.n	80050fe <_free_r+0x42>
 8005108:	6811      	ldr	r1, [r2, #0]
 800510a:	1850      	adds	r0, r2, r1
 800510c:	42a0      	cmp	r0, r4
 800510e:	d10b      	bne.n	8005128 <_free_r+0x6c>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	4401      	add	r1, r0
 8005114:	1850      	adds	r0, r2, r1
 8005116:	4283      	cmp	r3, r0
 8005118:	6011      	str	r1, [r2, #0]
 800511a:	d1e0      	bne.n	80050de <_free_r+0x22>
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	6053      	str	r3, [r2, #4]
 8005122:	4408      	add	r0, r1
 8005124:	6010      	str	r0, [r2, #0]
 8005126:	e7da      	b.n	80050de <_free_r+0x22>
 8005128:	d902      	bls.n	8005130 <_free_r+0x74>
 800512a:	230c      	movs	r3, #12
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	e7d6      	b.n	80050de <_free_r+0x22>
 8005130:	6820      	ldr	r0, [r4, #0]
 8005132:	1821      	adds	r1, r4, r0
 8005134:	428b      	cmp	r3, r1
 8005136:	bf04      	itt	eq
 8005138:	6819      	ldreq	r1, [r3, #0]
 800513a:	685b      	ldreq	r3, [r3, #4]
 800513c:	6063      	str	r3, [r4, #4]
 800513e:	bf04      	itt	eq
 8005140:	1809      	addeq	r1, r1, r0
 8005142:	6021      	streq	r1, [r4, #0]
 8005144:	6054      	str	r4, [r2, #4]
 8005146:	e7ca      	b.n	80050de <_free_r+0x22>
 8005148:	bd38      	pop	{r3, r4, r5, pc}
 800514a:	bf00      	nop
 800514c:	200002cc 	.word	0x200002cc

08005150 <sbrk_aligned>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4e0f      	ldr	r6, [pc, #60]	@ (8005190 <sbrk_aligned+0x40>)
 8005154:	460c      	mov	r4, r1
 8005156:	6831      	ldr	r1, [r6, #0]
 8005158:	4605      	mov	r5, r0
 800515a:	b911      	cbnz	r1, 8005162 <sbrk_aligned+0x12>
 800515c:	f000 fba4 	bl	80058a8 <_sbrk_r>
 8005160:	6030      	str	r0, [r6, #0]
 8005162:	4621      	mov	r1, r4
 8005164:	4628      	mov	r0, r5
 8005166:	f000 fb9f 	bl	80058a8 <_sbrk_r>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	d103      	bne.n	8005176 <sbrk_aligned+0x26>
 800516e:	f04f 34ff 	mov.w	r4, #4294967295
 8005172:	4620      	mov	r0, r4
 8005174:	bd70      	pop	{r4, r5, r6, pc}
 8005176:	1cc4      	adds	r4, r0, #3
 8005178:	f024 0403 	bic.w	r4, r4, #3
 800517c:	42a0      	cmp	r0, r4
 800517e:	d0f8      	beq.n	8005172 <sbrk_aligned+0x22>
 8005180:	1a21      	subs	r1, r4, r0
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fb90 	bl	80058a8 <_sbrk_r>
 8005188:	3001      	adds	r0, #1
 800518a:	d1f2      	bne.n	8005172 <sbrk_aligned+0x22>
 800518c:	e7ef      	b.n	800516e <sbrk_aligned+0x1e>
 800518e:	bf00      	nop
 8005190:	200002c8 	.word	0x200002c8

08005194 <_malloc_r>:
 8005194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005198:	1ccd      	adds	r5, r1, #3
 800519a:	f025 0503 	bic.w	r5, r5, #3
 800519e:	3508      	adds	r5, #8
 80051a0:	2d0c      	cmp	r5, #12
 80051a2:	bf38      	it	cc
 80051a4:	250c      	movcc	r5, #12
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	4606      	mov	r6, r0
 80051aa:	db01      	blt.n	80051b0 <_malloc_r+0x1c>
 80051ac:	42a9      	cmp	r1, r5
 80051ae:	d904      	bls.n	80051ba <_malloc_r+0x26>
 80051b0:	230c      	movs	r3, #12
 80051b2:	6033      	str	r3, [r6, #0]
 80051b4:	2000      	movs	r0, #0
 80051b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005290 <_malloc_r+0xfc>
 80051be:	f000 f869 	bl	8005294 <__malloc_lock>
 80051c2:	f8d8 3000 	ldr.w	r3, [r8]
 80051c6:	461c      	mov	r4, r3
 80051c8:	bb44      	cbnz	r4, 800521c <_malloc_r+0x88>
 80051ca:	4629      	mov	r1, r5
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7ff ffbf 	bl	8005150 <sbrk_aligned>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	4604      	mov	r4, r0
 80051d6:	d158      	bne.n	800528a <_malloc_r+0xf6>
 80051d8:	f8d8 4000 	ldr.w	r4, [r8]
 80051dc:	4627      	mov	r7, r4
 80051de:	2f00      	cmp	r7, #0
 80051e0:	d143      	bne.n	800526a <_malloc_r+0xd6>
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	d04b      	beq.n	800527e <_malloc_r+0xea>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	4639      	mov	r1, r7
 80051ea:	4630      	mov	r0, r6
 80051ec:	eb04 0903 	add.w	r9, r4, r3
 80051f0:	f000 fb5a 	bl	80058a8 <_sbrk_r>
 80051f4:	4581      	cmp	r9, r0
 80051f6:	d142      	bne.n	800527e <_malloc_r+0xea>
 80051f8:	6821      	ldr	r1, [r4, #0]
 80051fa:	1a6d      	subs	r5, r5, r1
 80051fc:	4629      	mov	r1, r5
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff ffa6 	bl	8005150 <sbrk_aligned>
 8005204:	3001      	adds	r0, #1
 8005206:	d03a      	beq.n	800527e <_malloc_r+0xea>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	442b      	add	r3, r5
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	f8d8 3000 	ldr.w	r3, [r8]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	bb62      	cbnz	r2, 8005270 <_malloc_r+0xdc>
 8005216:	f8c8 7000 	str.w	r7, [r8]
 800521a:	e00f      	b.n	800523c <_malloc_r+0xa8>
 800521c:	6822      	ldr	r2, [r4, #0]
 800521e:	1b52      	subs	r2, r2, r5
 8005220:	d420      	bmi.n	8005264 <_malloc_r+0xd0>
 8005222:	2a0b      	cmp	r2, #11
 8005224:	d917      	bls.n	8005256 <_malloc_r+0xc2>
 8005226:	1961      	adds	r1, r4, r5
 8005228:	42a3      	cmp	r3, r4
 800522a:	6025      	str	r5, [r4, #0]
 800522c:	bf18      	it	ne
 800522e:	6059      	strne	r1, [r3, #4]
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	bf08      	it	eq
 8005234:	f8c8 1000 	streq.w	r1, [r8]
 8005238:	5162      	str	r2, [r4, r5]
 800523a:	604b      	str	r3, [r1, #4]
 800523c:	4630      	mov	r0, r6
 800523e:	f000 f82f 	bl	80052a0 <__malloc_unlock>
 8005242:	f104 000b 	add.w	r0, r4, #11
 8005246:	1d23      	adds	r3, r4, #4
 8005248:	f020 0007 	bic.w	r0, r0, #7
 800524c:	1ac2      	subs	r2, r0, r3
 800524e:	bf1c      	itt	ne
 8005250:	1a1b      	subne	r3, r3, r0
 8005252:	50a3      	strne	r3, [r4, r2]
 8005254:	e7af      	b.n	80051b6 <_malloc_r+0x22>
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	42a3      	cmp	r3, r4
 800525a:	bf0c      	ite	eq
 800525c:	f8c8 2000 	streq.w	r2, [r8]
 8005260:	605a      	strne	r2, [r3, #4]
 8005262:	e7eb      	b.n	800523c <_malloc_r+0xa8>
 8005264:	4623      	mov	r3, r4
 8005266:	6864      	ldr	r4, [r4, #4]
 8005268:	e7ae      	b.n	80051c8 <_malloc_r+0x34>
 800526a:	463c      	mov	r4, r7
 800526c:	687f      	ldr	r7, [r7, #4]
 800526e:	e7b6      	b.n	80051de <_malloc_r+0x4a>
 8005270:	461a      	mov	r2, r3
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	42a3      	cmp	r3, r4
 8005276:	d1fb      	bne.n	8005270 <_malloc_r+0xdc>
 8005278:	2300      	movs	r3, #0
 800527a:	6053      	str	r3, [r2, #4]
 800527c:	e7de      	b.n	800523c <_malloc_r+0xa8>
 800527e:	230c      	movs	r3, #12
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	4630      	mov	r0, r6
 8005284:	f000 f80c 	bl	80052a0 <__malloc_unlock>
 8005288:	e794      	b.n	80051b4 <_malloc_r+0x20>
 800528a:	6005      	str	r5, [r0, #0]
 800528c:	e7d6      	b.n	800523c <_malloc_r+0xa8>
 800528e:	bf00      	nop
 8005290:	200002cc 	.word	0x200002cc

08005294 <__malloc_lock>:
 8005294:	4801      	ldr	r0, [pc, #4]	@ (800529c <__malloc_lock+0x8>)
 8005296:	f7ff bf0f 	b.w	80050b8 <__retarget_lock_acquire_recursive>
 800529a:	bf00      	nop
 800529c:	200002c4 	.word	0x200002c4

080052a0 <__malloc_unlock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	@ (80052a8 <__malloc_unlock+0x8>)
 80052a2:	f7ff bf0a 	b.w	80050ba <__retarget_lock_release_recursive>
 80052a6:	bf00      	nop
 80052a8:	200002c4 	.word	0x200002c4

080052ac <__ssputs_r>:
 80052ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	688e      	ldr	r6, [r1, #8]
 80052b2:	461f      	mov	r7, r3
 80052b4:	42be      	cmp	r6, r7
 80052b6:	680b      	ldr	r3, [r1, #0]
 80052b8:	4682      	mov	sl, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	4690      	mov	r8, r2
 80052be:	d82d      	bhi.n	800531c <__ssputs_r+0x70>
 80052c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80052c8:	d026      	beq.n	8005318 <__ssputs_r+0x6c>
 80052ca:	6965      	ldr	r5, [r4, #20]
 80052cc:	6909      	ldr	r1, [r1, #16]
 80052ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052d2:	eba3 0901 	sub.w	r9, r3, r1
 80052d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052da:	1c7b      	adds	r3, r7, #1
 80052dc:	444b      	add	r3, r9
 80052de:	106d      	asrs	r5, r5, #1
 80052e0:	429d      	cmp	r5, r3
 80052e2:	bf38      	it	cc
 80052e4:	461d      	movcc	r5, r3
 80052e6:	0553      	lsls	r3, r2, #21
 80052e8:	d527      	bpl.n	800533a <__ssputs_r+0x8e>
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7ff ff52 	bl	8005194 <_malloc_r>
 80052f0:	4606      	mov	r6, r0
 80052f2:	b360      	cbz	r0, 800534e <__ssputs_r+0xa2>
 80052f4:	6921      	ldr	r1, [r4, #16]
 80052f6:	464a      	mov	r2, r9
 80052f8:	f000 fae6 	bl	80058c8 <memcpy>
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005306:	81a3      	strh	r3, [r4, #12]
 8005308:	6126      	str	r6, [r4, #16]
 800530a:	6165      	str	r5, [r4, #20]
 800530c:	444e      	add	r6, r9
 800530e:	eba5 0509 	sub.w	r5, r5, r9
 8005312:	6026      	str	r6, [r4, #0]
 8005314:	60a5      	str	r5, [r4, #8]
 8005316:	463e      	mov	r6, r7
 8005318:	42be      	cmp	r6, r7
 800531a:	d900      	bls.n	800531e <__ssputs_r+0x72>
 800531c:	463e      	mov	r6, r7
 800531e:	6820      	ldr	r0, [r4, #0]
 8005320:	4632      	mov	r2, r6
 8005322:	4641      	mov	r1, r8
 8005324:	f000 faa6 	bl	8005874 <memmove>
 8005328:	68a3      	ldr	r3, [r4, #8]
 800532a:	1b9b      	subs	r3, r3, r6
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	4433      	add	r3, r6
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	2000      	movs	r0, #0
 8005336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533a:	462a      	mov	r2, r5
 800533c:	f000 fad2 	bl	80058e4 <_realloc_r>
 8005340:	4606      	mov	r6, r0
 8005342:	2800      	cmp	r0, #0
 8005344:	d1e0      	bne.n	8005308 <__ssputs_r+0x5c>
 8005346:	6921      	ldr	r1, [r4, #16]
 8005348:	4650      	mov	r0, sl
 800534a:	f7ff feb7 	bl	80050bc <_free_r>
 800534e:	230c      	movs	r3, #12
 8005350:	f8ca 3000 	str.w	r3, [sl]
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	e7e9      	b.n	8005336 <__ssputs_r+0x8a>
	...

08005364 <_svfiprintf_r>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	4698      	mov	r8, r3
 800536a:	898b      	ldrh	r3, [r1, #12]
 800536c:	061b      	lsls	r3, r3, #24
 800536e:	b09d      	sub	sp, #116	@ 0x74
 8005370:	4607      	mov	r7, r0
 8005372:	460d      	mov	r5, r1
 8005374:	4614      	mov	r4, r2
 8005376:	d510      	bpl.n	800539a <_svfiprintf_r+0x36>
 8005378:	690b      	ldr	r3, [r1, #16]
 800537a:	b973      	cbnz	r3, 800539a <_svfiprintf_r+0x36>
 800537c:	2140      	movs	r1, #64	@ 0x40
 800537e:	f7ff ff09 	bl	8005194 <_malloc_r>
 8005382:	6028      	str	r0, [r5, #0]
 8005384:	6128      	str	r0, [r5, #16]
 8005386:	b930      	cbnz	r0, 8005396 <_svfiprintf_r+0x32>
 8005388:	230c      	movs	r3, #12
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	b01d      	add	sp, #116	@ 0x74
 8005392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005396:	2340      	movs	r3, #64	@ 0x40
 8005398:	616b      	str	r3, [r5, #20]
 800539a:	2300      	movs	r3, #0
 800539c:	9309      	str	r3, [sp, #36]	@ 0x24
 800539e:	2320      	movs	r3, #32
 80053a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80053a8:	2330      	movs	r3, #48	@ 0x30
 80053aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005548 <_svfiprintf_r+0x1e4>
 80053ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053b2:	f04f 0901 	mov.w	r9, #1
 80053b6:	4623      	mov	r3, r4
 80053b8:	469a      	mov	sl, r3
 80053ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053be:	b10a      	cbz	r2, 80053c4 <_svfiprintf_r+0x60>
 80053c0:	2a25      	cmp	r2, #37	@ 0x25
 80053c2:	d1f9      	bne.n	80053b8 <_svfiprintf_r+0x54>
 80053c4:	ebba 0b04 	subs.w	fp, sl, r4
 80053c8:	d00b      	beq.n	80053e2 <_svfiprintf_r+0x7e>
 80053ca:	465b      	mov	r3, fp
 80053cc:	4622      	mov	r2, r4
 80053ce:	4629      	mov	r1, r5
 80053d0:	4638      	mov	r0, r7
 80053d2:	f7ff ff6b 	bl	80052ac <__ssputs_r>
 80053d6:	3001      	adds	r0, #1
 80053d8:	f000 80a7 	beq.w	800552a <_svfiprintf_r+0x1c6>
 80053dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053de:	445a      	add	r2, fp
 80053e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80053e2:	f89a 3000 	ldrb.w	r3, [sl]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 809f 	beq.w	800552a <_svfiprintf_r+0x1c6>
 80053ec:	2300      	movs	r3, #0
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295
 80053f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053f6:	f10a 0a01 	add.w	sl, sl, #1
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	9307      	str	r3, [sp, #28]
 80053fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005402:	931a      	str	r3, [sp, #104]	@ 0x68
 8005404:	4654      	mov	r4, sl
 8005406:	2205      	movs	r2, #5
 8005408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800540c:	484e      	ldr	r0, [pc, #312]	@ (8005548 <_svfiprintf_r+0x1e4>)
 800540e:	f7fa fee7 	bl	80001e0 <memchr>
 8005412:	9a04      	ldr	r2, [sp, #16]
 8005414:	b9d8      	cbnz	r0, 800544e <_svfiprintf_r+0xea>
 8005416:	06d0      	lsls	r0, r2, #27
 8005418:	bf44      	itt	mi
 800541a:	2320      	movmi	r3, #32
 800541c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005420:	0711      	lsls	r1, r2, #28
 8005422:	bf44      	itt	mi
 8005424:	232b      	movmi	r3, #43	@ 0x2b
 8005426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800542a:	f89a 3000 	ldrb.w	r3, [sl]
 800542e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005430:	d015      	beq.n	800545e <_svfiprintf_r+0xfa>
 8005432:	9a07      	ldr	r2, [sp, #28]
 8005434:	4654      	mov	r4, sl
 8005436:	2000      	movs	r0, #0
 8005438:	f04f 0c0a 	mov.w	ip, #10
 800543c:	4621      	mov	r1, r4
 800543e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005442:	3b30      	subs	r3, #48	@ 0x30
 8005444:	2b09      	cmp	r3, #9
 8005446:	d94b      	bls.n	80054e0 <_svfiprintf_r+0x17c>
 8005448:	b1b0      	cbz	r0, 8005478 <_svfiprintf_r+0x114>
 800544a:	9207      	str	r2, [sp, #28]
 800544c:	e014      	b.n	8005478 <_svfiprintf_r+0x114>
 800544e:	eba0 0308 	sub.w	r3, r0, r8
 8005452:	fa09 f303 	lsl.w	r3, r9, r3
 8005456:	4313      	orrs	r3, r2
 8005458:	9304      	str	r3, [sp, #16]
 800545a:	46a2      	mov	sl, r4
 800545c:	e7d2      	b.n	8005404 <_svfiprintf_r+0xa0>
 800545e:	9b03      	ldr	r3, [sp, #12]
 8005460:	1d19      	adds	r1, r3, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	9103      	str	r1, [sp, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	bfbb      	ittet	lt
 800546a:	425b      	neglt	r3, r3
 800546c:	f042 0202 	orrlt.w	r2, r2, #2
 8005470:	9307      	strge	r3, [sp, #28]
 8005472:	9307      	strlt	r3, [sp, #28]
 8005474:	bfb8      	it	lt
 8005476:	9204      	strlt	r2, [sp, #16]
 8005478:	7823      	ldrb	r3, [r4, #0]
 800547a:	2b2e      	cmp	r3, #46	@ 0x2e
 800547c:	d10a      	bne.n	8005494 <_svfiprintf_r+0x130>
 800547e:	7863      	ldrb	r3, [r4, #1]
 8005480:	2b2a      	cmp	r3, #42	@ 0x2a
 8005482:	d132      	bne.n	80054ea <_svfiprintf_r+0x186>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	9203      	str	r2, [sp, #12]
 800548c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005490:	3402      	adds	r4, #2
 8005492:	9305      	str	r3, [sp, #20]
 8005494:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005558 <_svfiprintf_r+0x1f4>
 8005498:	7821      	ldrb	r1, [r4, #0]
 800549a:	2203      	movs	r2, #3
 800549c:	4650      	mov	r0, sl
 800549e:	f7fa fe9f 	bl	80001e0 <memchr>
 80054a2:	b138      	cbz	r0, 80054b4 <_svfiprintf_r+0x150>
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	eba0 000a 	sub.w	r0, r0, sl
 80054aa:	2240      	movs	r2, #64	@ 0x40
 80054ac:	4082      	lsls	r2, r0
 80054ae:	4313      	orrs	r3, r2
 80054b0:	3401      	adds	r4, #1
 80054b2:	9304      	str	r3, [sp, #16]
 80054b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054b8:	4824      	ldr	r0, [pc, #144]	@ (800554c <_svfiprintf_r+0x1e8>)
 80054ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054be:	2206      	movs	r2, #6
 80054c0:	f7fa fe8e 	bl	80001e0 <memchr>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d036      	beq.n	8005536 <_svfiprintf_r+0x1d2>
 80054c8:	4b21      	ldr	r3, [pc, #132]	@ (8005550 <_svfiprintf_r+0x1ec>)
 80054ca:	bb1b      	cbnz	r3, 8005514 <_svfiprintf_r+0x1b0>
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	3307      	adds	r3, #7
 80054d0:	f023 0307 	bic.w	r3, r3, #7
 80054d4:	3308      	adds	r3, #8
 80054d6:	9303      	str	r3, [sp, #12]
 80054d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054da:	4433      	add	r3, r6
 80054dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80054de:	e76a      	b.n	80053b6 <_svfiprintf_r+0x52>
 80054e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054e4:	460c      	mov	r4, r1
 80054e6:	2001      	movs	r0, #1
 80054e8:	e7a8      	b.n	800543c <_svfiprintf_r+0xd8>
 80054ea:	2300      	movs	r3, #0
 80054ec:	3401      	adds	r4, #1
 80054ee:	9305      	str	r3, [sp, #20]
 80054f0:	4619      	mov	r1, r3
 80054f2:	f04f 0c0a 	mov.w	ip, #10
 80054f6:	4620      	mov	r0, r4
 80054f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054fc:	3a30      	subs	r2, #48	@ 0x30
 80054fe:	2a09      	cmp	r2, #9
 8005500:	d903      	bls.n	800550a <_svfiprintf_r+0x1a6>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0c6      	beq.n	8005494 <_svfiprintf_r+0x130>
 8005506:	9105      	str	r1, [sp, #20]
 8005508:	e7c4      	b.n	8005494 <_svfiprintf_r+0x130>
 800550a:	fb0c 2101 	mla	r1, ip, r1, r2
 800550e:	4604      	mov	r4, r0
 8005510:	2301      	movs	r3, #1
 8005512:	e7f0      	b.n	80054f6 <_svfiprintf_r+0x192>
 8005514:	ab03      	add	r3, sp, #12
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	462a      	mov	r2, r5
 800551a:	4b0e      	ldr	r3, [pc, #56]	@ (8005554 <_svfiprintf_r+0x1f0>)
 800551c:	a904      	add	r1, sp, #16
 800551e:	4638      	mov	r0, r7
 8005520:	f3af 8000 	nop.w
 8005524:	1c42      	adds	r2, r0, #1
 8005526:	4606      	mov	r6, r0
 8005528:	d1d6      	bne.n	80054d8 <_svfiprintf_r+0x174>
 800552a:	89ab      	ldrh	r3, [r5, #12]
 800552c:	065b      	lsls	r3, r3, #25
 800552e:	f53f af2d 	bmi.w	800538c <_svfiprintf_r+0x28>
 8005532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005534:	e72c      	b.n	8005390 <_svfiprintf_r+0x2c>
 8005536:	ab03      	add	r3, sp, #12
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	462a      	mov	r2, r5
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <_svfiprintf_r+0x1f0>)
 800553e:	a904      	add	r1, sp, #16
 8005540:	4638      	mov	r0, r7
 8005542:	f000 f879 	bl	8005638 <_printf_i>
 8005546:	e7ed      	b.n	8005524 <_svfiprintf_r+0x1c0>
 8005548:	080059b4 	.word	0x080059b4
 800554c:	080059be 	.word	0x080059be
 8005550:	00000000 	.word	0x00000000
 8005554:	080052ad 	.word	0x080052ad
 8005558:	080059ba 	.word	0x080059ba

0800555c <_printf_common>:
 800555c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005560:	4616      	mov	r6, r2
 8005562:	4698      	mov	r8, r3
 8005564:	688a      	ldr	r2, [r1, #8]
 8005566:	690b      	ldr	r3, [r1, #16]
 8005568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800556c:	4293      	cmp	r3, r2
 800556e:	bfb8      	it	lt
 8005570:	4613      	movlt	r3, r2
 8005572:	6033      	str	r3, [r6, #0]
 8005574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005578:	4607      	mov	r7, r0
 800557a:	460c      	mov	r4, r1
 800557c:	b10a      	cbz	r2, 8005582 <_printf_common+0x26>
 800557e:	3301      	adds	r3, #1
 8005580:	6033      	str	r3, [r6, #0]
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	0699      	lsls	r1, r3, #26
 8005586:	bf42      	ittt	mi
 8005588:	6833      	ldrmi	r3, [r6, #0]
 800558a:	3302      	addmi	r3, #2
 800558c:	6033      	strmi	r3, [r6, #0]
 800558e:	6825      	ldr	r5, [r4, #0]
 8005590:	f015 0506 	ands.w	r5, r5, #6
 8005594:	d106      	bne.n	80055a4 <_printf_common+0x48>
 8005596:	f104 0a19 	add.w	sl, r4, #25
 800559a:	68e3      	ldr	r3, [r4, #12]
 800559c:	6832      	ldr	r2, [r6, #0]
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	42ab      	cmp	r3, r5
 80055a2:	dc26      	bgt.n	80055f2 <_printf_common+0x96>
 80055a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055a8:	6822      	ldr	r2, [r4, #0]
 80055aa:	3b00      	subs	r3, #0
 80055ac:	bf18      	it	ne
 80055ae:	2301      	movne	r3, #1
 80055b0:	0692      	lsls	r2, r2, #26
 80055b2:	d42b      	bmi.n	800560c <_printf_common+0xb0>
 80055b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055b8:	4641      	mov	r1, r8
 80055ba:	4638      	mov	r0, r7
 80055bc:	47c8      	blx	r9
 80055be:	3001      	adds	r0, #1
 80055c0:	d01e      	beq.n	8005600 <_printf_common+0xa4>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	6922      	ldr	r2, [r4, #16]
 80055c6:	f003 0306 	and.w	r3, r3, #6
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	bf02      	ittt	eq
 80055ce:	68e5      	ldreq	r5, [r4, #12]
 80055d0:	6833      	ldreq	r3, [r6, #0]
 80055d2:	1aed      	subeq	r5, r5, r3
 80055d4:	68a3      	ldr	r3, [r4, #8]
 80055d6:	bf0c      	ite	eq
 80055d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055dc:	2500      	movne	r5, #0
 80055de:	4293      	cmp	r3, r2
 80055e0:	bfc4      	itt	gt
 80055e2:	1a9b      	subgt	r3, r3, r2
 80055e4:	18ed      	addgt	r5, r5, r3
 80055e6:	2600      	movs	r6, #0
 80055e8:	341a      	adds	r4, #26
 80055ea:	42b5      	cmp	r5, r6
 80055ec:	d11a      	bne.n	8005624 <_printf_common+0xc8>
 80055ee:	2000      	movs	r0, #0
 80055f0:	e008      	b.n	8005604 <_printf_common+0xa8>
 80055f2:	2301      	movs	r3, #1
 80055f4:	4652      	mov	r2, sl
 80055f6:	4641      	mov	r1, r8
 80055f8:	4638      	mov	r0, r7
 80055fa:	47c8      	blx	r9
 80055fc:	3001      	adds	r0, #1
 80055fe:	d103      	bne.n	8005608 <_printf_common+0xac>
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005608:	3501      	adds	r5, #1
 800560a:	e7c6      	b.n	800559a <_printf_common+0x3e>
 800560c:	18e1      	adds	r1, r4, r3
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	2030      	movs	r0, #48	@ 0x30
 8005612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005616:	4422      	add	r2, r4
 8005618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800561c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005620:	3302      	adds	r3, #2
 8005622:	e7c7      	b.n	80055b4 <_printf_common+0x58>
 8005624:	2301      	movs	r3, #1
 8005626:	4622      	mov	r2, r4
 8005628:	4641      	mov	r1, r8
 800562a:	4638      	mov	r0, r7
 800562c:	47c8      	blx	r9
 800562e:	3001      	adds	r0, #1
 8005630:	d0e6      	beq.n	8005600 <_printf_common+0xa4>
 8005632:	3601      	adds	r6, #1
 8005634:	e7d9      	b.n	80055ea <_printf_common+0x8e>
	...

08005638 <_printf_i>:
 8005638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800563c:	7e0f      	ldrb	r7, [r1, #24]
 800563e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005640:	2f78      	cmp	r7, #120	@ 0x78
 8005642:	4691      	mov	r9, r2
 8005644:	4680      	mov	r8, r0
 8005646:	460c      	mov	r4, r1
 8005648:	469a      	mov	sl, r3
 800564a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800564e:	d807      	bhi.n	8005660 <_printf_i+0x28>
 8005650:	2f62      	cmp	r7, #98	@ 0x62
 8005652:	d80a      	bhi.n	800566a <_printf_i+0x32>
 8005654:	2f00      	cmp	r7, #0
 8005656:	f000 80d1 	beq.w	80057fc <_printf_i+0x1c4>
 800565a:	2f58      	cmp	r7, #88	@ 0x58
 800565c:	f000 80b8 	beq.w	80057d0 <_printf_i+0x198>
 8005660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005668:	e03a      	b.n	80056e0 <_printf_i+0xa8>
 800566a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800566e:	2b15      	cmp	r3, #21
 8005670:	d8f6      	bhi.n	8005660 <_printf_i+0x28>
 8005672:	a101      	add	r1, pc, #4	@ (adr r1, 8005678 <_printf_i+0x40>)
 8005674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005678:	080056d1 	.word	0x080056d1
 800567c:	080056e5 	.word	0x080056e5
 8005680:	08005661 	.word	0x08005661
 8005684:	08005661 	.word	0x08005661
 8005688:	08005661 	.word	0x08005661
 800568c:	08005661 	.word	0x08005661
 8005690:	080056e5 	.word	0x080056e5
 8005694:	08005661 	.word	0x08005661
 8005698:	08005661 	.word	0x08005661
 800569c:	08005661 	.word	0x08005661
 80056a0:	08005661 	.word	0x08005661
 80056a4:	080057e3 	.word	0x080057e3
 80056a8:	0800570f 	.word	0x0800570f
 80056ac:	0800579d 	.word	0x0800579d
 80056b0:	08005661 	.word	0x08005661
 80056b4:	08005661 	.word	0x08005661
 80056b8:	08005805 	.word	0x08005805
 80056bc:	08005661 	.word	0x08005661
 80056c0:	0800570f 	.word	0x0800570f
 80056c4:	08005661 	.word	0x08005661
 80056c8:	08005661 	.word	0x08005661
 80056cc:	080057a5 	.word	0x080057a5
 80056d0:	6833      	ldr	r3, [r6, #0]
 80056d2:	1d1a      	adds	r2, r3, #4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6032      	str	r2, [r6, #0]
 80056d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056e0:	2301      	movs	r3, #1
 80056e2:	e09c      	b.n	800581e <_printf_i+0x1e6>
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	6820      	ldr	r0, [r4, #0]
 80056e8:	1d19      	adds	r1, r3, #4
 80056ea:	6031      	str	r1, [r6, #0]
 80056ec:	0606      	lsls	r6, r0, #24
 80056ee:	d501      	bpl.n	80056f4 <_printf_i+0xbc>
 80056f0:	681d      	ldr	r5, [r3, #0]
 80056f2:	e003      	b.n	80056fc <_printf_i+0xc4>
 80056f4:	0645      	lsls	r5, r0, #25
 80056f6:	d5fb      	bpl.n	80056f0 <_printf_i+0xb8>
 80056f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	da03      	bge.n	8005708 <_printf_i+0xd0>
 8005700:	232d      	movs	r3, #45	@ 0x2d
 8005702:	426d      	negs	r5, r5
 8005704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005708:	4858      	ldr	r0, [pc, #352]	@ (800586c <_printf_i+0x234>)
 800570a:	230a      	movs	r3, #10
 800570c:	e011      	b.n	8005732 <_printf_i+0xfa>
 800570e:	6821      	ldr	r1, [r4, #0]
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	0608      	lsls	r0, r1, #24
 8005714:	f853 5b04 	ldr.w	r5, [r3], #4
 8005718:	d402      	bmi.n	8005720 <_printf_i+0xe8>
 800571a:	0649      	lsls	r1, r1, #25
 800571c:	bf48      	it	mi
 800571e:	b2ad      	uxthmi	r5, r5
 8005720:	2f6f      	cmp	r7, #111	@ 0x6f
 8005722:	4852      	ldr	r0, [pc, #328]	@ (800586c <_printf_i+0x234>)
 8005724:	6033      	str	r3, [r6, #0]
 8005726:	bf14      	ite	ne
 8005728:	230a      	movne	r3, #10
 800572a:	2308      	moveq	r3, #8
 800572c:	2100      	movs	r1, #0
 800572e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005732:	6866      	ldr	r6, [r4, #4]
 8005734:	60a6      	str	r6, [r4, #8]
 8005736:	2e00      	cmp	r6, #0
 8005738:	db05      	blt.n	8005746 <_printf_i+0x10e>
 800573a:	6821      	ldr	r1, [r4, #0]
 800573c:	432e      	orrs	r6, r5
 800573e:	f021 0104 	bic.w	r1, r1, #4
 8005742:	6021      	str	r1, [r4, #0]
 8005744:	d04b      	beq.n	80057de <_printf_i+0x1a6>
 8005746:	4616      	mov	r6, r2
 8005748:	fbb5 f1f3 	udiv	r1, r5, r3
 800574c:	fb03 5711 	mls	r7, r3, r1, r5
 8005750:	5dc7      	ldrb	r7, [r0, r7]
 8005752:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005756:	462f      	mov	r7, r5
 8005758:	42bb      	cmp	r3, r7
 800575a:	460d      	mov	r5, r1
 800575c:	d9f4      	bls.n	8005748 <_printf_i+0x110>
 800575e:	2b08      	cmp	r3, #8
 8005760:	d10b      	bne.n	800577a <_printf_i+0x142>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	07df      	lsls	r7, r3, #31
 8005766:	d508      	bpl.n	800577a <_printf_i+0x142>
 8005768:	6923      	ldr	r3, [r4, #16]
 800576a:	6861      	ldr	r1, [r4, #4]
 800576c:	4299      	cmp	r1, r3
 800576e:	bfde      	ittt	le
 8005770:	2330      	movle	r3, #48	@ 0x30
 8005772:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005776:	f106 36ff 	addle.w	r6, r6, #4294967295
 800577a:	1b92      	subs	r2, r2, r6
 800577c:	6122      	str	r2, [r4, #16]
 800577e:	f8cd a000 	str.w	sl, [sp]
 8005782:	464b      	mov	r3, r9
 8005784:	aa03      	add	r2, sp, #12
 8005786:	4621      	mov	r1, r4
 8005788:	4640      	mov	r0, r8
 800578a:	f7ff fee7 	bl	800555c <_printf_common>
 800578e:	3001      	adds	r0, #1
 8005790:	d14a      	bne.n	8005828 <_printf_i+0x1f0>
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	b004      	add	sp, #16
 8005798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	f043 0320 	orr.w	r3, r3, #32
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	4832      	ldr	r0, [pc, #200]	@ (8005870 <_printf_i+0x238>)
 80057a6:	2778      	movs	r7, #120	@ 0x78
 80057a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	6831      	ldr	r1, [r6, #0]
 80057b0:	061f      	lsls	r7, r3, #24
 80057b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80057b6:	d402      	bmi.n	80057be <_printf_i+0x186>
 80057b8:	065f      	lsls	r7, r3, #25
 80057ba:	bf48      	it	mi
 80057bc:	b2ad      	uxthmi	r5, r5
 80057be:	6031      	str	r1, [r6, #0]
 80057c0:	07d9      	lsls	r1, r3, #31
 80057c2:	bf44      	itt	mi
 80057c4:	f043 0320 	orrmi.w	r3, r3, #32
 80057c8:	6023      	strmi	r3, [r4, #0]
 80057ca:	b11d      	cbz	r5, 80057d4 <_printf_i+0x19c>
 80057cc:	2310      	movs	r3, #16
 80057ce:	e7ad      	b.n	800572c <_printf_i+0xf4>
 80057d0:	4826      	ldr	r0, [pc, #152]	@ (800586c <_printf_i+0x234>)
 80057d2:	e7e9      	b.n	80057a8 <_printf_i+0x170>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	f023 0320 	bic.w	r3, r3, #32
 80057da:	6023      	str	r3, [r4, #0]
 80057dc:	e7f6      	b.n	80057cc <_printf_i+0x194>
 80057de:	4616      	mov	r6, r2
 80057e0:	e7bd      	b.n	800575e <_printf_i+0x126>
 80057e2:	6833      	ldr	r3, [r6, #0]
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	6961      	ldr	r1, [r4, #20]
 80057e8:	1d18      	adds	r0, r3, #4
 80057ea:	6030      	str	r0, [r6, #0]
 80057ec:	062e      	lsls	r6, r5, #24
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	d501      	bpl.n	80057f6 <_printf_i+0x1be>
 80057f2:	6019      	str	r1, [r3, #0]
 80057f4:	e002      	b.n	80057fc <_printf_i+0x1c4>
 80057f6:	0668      	lsls	r0, r5, #25
 80057f8:	d5fb      	bpl.n	80057f2 <_printf_i+0x1ba>
 80057fa:	8019      	strh	r1, [r3, #0]
 80057fc:	2300      	movs	r3, #0
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	4616      	mov	r6, r2
 8005802:	e7bc      	b.n	800577e <_printf_i+0x146>
 8005804:	6833      	ldr	r3, [r6, #0]
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	6032      	str	r2, [r6, #0]
 800580a:	681e      	ldr	r6, [r3, #0]
 800580c:	6862      	ldr	r2, [r4, #4]
 800580e:	2100      	movs	r1, #0
 8005810:	4630      	mov	r0, r6
 8005812:	f7fa fce5 	bl	80001e0 <memchr>
 8005816:	b108      	cbz	r0, 800581c <_printf_i+0x1e4>
 8005818:	1b80      	subs	r0, r0, r6
 800581a:	6060      	str	r0, [r4, #4]
 800581c:	6863      	ldr	r3, [r4, #4]
 800581e:	6123      	str	r3, [r4, #16]
 8005820:	2300      	movs	r3, #0
 8005822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005826:	e7aa      	b.n	800577e <_printf_i+0x146>
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	4632      	mov	r2, r6
 800582c:	4649      	mov	r1, r9
 800582e:	4640      	mov	r0, r8
 8005830:	47d0      	blx	sl
 8005832:	3001      	adds	r0, #1
 8005834:	d0ad      	beq.n	8005792 <_printf_i+0x15a>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	079b      	lsls	r3, r3, #30
 800583a:	d413      	bmi.n	8005864 <_printf_i+0x22c>
 800583c:	68e0      	ldr	r0, [r4, #12]
 800583e:	9b03      	ldr	r3, [sp, #12]
 8005840:	4298      	cmp	r0, r3
 8005842:	bfb8      	it	lt
 8005844:	4618      	movlt	r0, r3
 8005846:	e7a6      	b.n	8005796 <_printf_i+0x15e>
 8005848:	2301      	movs	r3, #1
 800584a:	4632      	mov	r2, r6
 800584c:	4649      	mov	r1, r9
 800584e:	4640      	mov	r0, r8
 8005850:	47d0      	blx	sl
 8005852:	3001      	adds	r0, #1
 8005854:	d09d      	beq.n	8005792 <_printf_i+0x15a>
 8005856:	3501      	adds	r5, #1
 8005858:	68e3      	ldr	r3, [r4, #12]
 800585a:	9903      	ldr	r1, [sp, #12]
 800585c:	1a5b      	subs	r3, r3, r1
 800585e:	42ab      	cmp	r3, r5
 8005860:	dcf2      	bgt.n	8005848 <_printf_i+0x210>
 8005862:	e7eb      	b.n	800583c <_printf_i+0x204>
 8005864:	2500      	movs	r5, #0
 8005866:	f104 0619 	add.w	r6, r4, #25
 800586a:	e7f5      	b.n	8005858 <_printf_i+0x220>
 800586c:	080059c5 	.word	0x080059c5
 8005870:	080059d6 	.word	0x080059d6

08005874 <memmove>:
 8005874:	4288      	cmp	r0, r1
 8005876:	b510      	push	{r4, lr}
 8005878:	eb01 0402 	add.w	r4, r1, r2
 800587c:	d902      	bls.n	8005884 <memmove+0x10>
 800587e:	4284      	cmp	r4, r0
 8005880:	4623      	mov	r3, r4
 8005882:	d807      	bhi.n	8005894 <memmove+0x20>
 8005884:	1e43      	subs	r3, r0, #1
 8005886:	42a1      	cmp	r1, r4
 8005888:	d008      	beq.n	800589c <memmove+0x28>
 800588a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800588e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005892:	e7f8      	b.n	8005886 <memmove+0x12>
 8005894:	4402      	add	r2, r0
 8005896:	4601      	mov	r1, r0
 8005898:	428a      	cmp	r2, r1
 800589a:	d100      	bne.n	800589e <memmove+0x2a>
 800589c:	bd10      	pop	{r4, pc}
 800589e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058a6:	e7f7      	b.n	8005898 <memmove+0x24>

080058a8 <_sbrk_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d06      	ldr	r5, [pc, #24]	@ (80058c4 <_sbrk_r+0x1c>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	602b      	str	r3, [r5, #0]
 80058b4:	f7fb fbba 	bl	800102c <_sbrk>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_sbrk_r+0x1a>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_sbrk_r+0x1a>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	200002c0 	.word	0x200002c0

080058c8 <memcpy>:
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d0:	d100      	bne.n	80058d4 <memcpy+0xc>
 80058d2:	4770      	bx	lr
 80058d4:	b510      	push	{r4, lr}
 80058d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058de:	4291      	cmp	r1, r2
 80058e0:	d1f9      	bne.n	80058d6 <memcpy+0xe>
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <_realloc_r>:
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	4607      	mov	r7, r0
 80058ea:	4614      	mov	r4, r2
 80058ec:	460d      	mov	r5, r1
 80058ee:	b921      	cbnz	r1, 80058fa <_realloc_r+0x16>
 80058f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f4:	4611      	mov	r1, r2
 80058f6:	f7ff bc4d 	b.w	8005194 <_malloc_r>
 80058fa:	b92a      	cbnz	r2, 8005908 <_realloc_r+0x24>
 80058fc:	f7ff fbde 	bl	80050bc <_free_r>
 8005900:	4625      	mov	r5, r4
 8005902:	4628      	mov	r0, r5
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005908:	f000 f81a 	bl	8005940 <_malloc_usable_size_r>
 800590c:	4284      	cmp	r4, r0
 800590e:	4606      	mov	r6, r0
 8005910:	d802      	bhi.n	8005918 <_realloc_r+0x34>
 8005912:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005916:	d8f4      	bhi.n	8005902 <_realloc_r+0x1e>
 8005918:	4621      	mov	r1, r4
 800591a:	4638      	mov	r0, r7
 800591c:	f7ff fc3a 	bl	8005194 <_malloc_r>
 8005920:	4680      	mov	r8, r0
 8005922:	b908      	cbnz	r0, 8005928 <_realloc_r+0x44>
 8005924:	4645      	mov	r5, r8
 8005926:	e7ec      	b.n	8005902 <_realloc_r+0x1e>
 8005928:	42b4      	cmp	r4, r6
 800592a:	4622      	mov	r2, r4
 800592c:	4629      	mov	r1, r5
 800592e:	bf28      	it	cs
 8005930:	4632      	movcs	r2, r6
 8005932:	f7ff ffc9 	bl	80058c8 <memcpy>
 8005936:	4629      	mov	r1, r5
 8005938:	4638      	mov	r0, r7
 800593a:	f7ff fbbf 	bl	80050bc <_free_r>
 800593e:	e7f1      	b.n	8005924 <_realloc_r+0x40>

08005940 <_malloc_usable_size_r>:
 8005940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005944:	1f18      	subs	r0, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	bfbc      	itt	lt
 800594a:	580b      	ldrlt	r3, [r1, r0]
 800594c:	18c0      	addlt	r0, r0, r3
 800594e:	4770      	bx	lr

08005950 <_init>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr

0800595c <_fini>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr
